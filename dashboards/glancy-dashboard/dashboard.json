{
  "__inputs": [
    {
      "name": "DS_REDDIT_API",
      "label": "Reddit API",
      "description": "",
      "type": "datasource",
      "pluginId": "yesoreyeram-infinity-datasource",
      "pluginName": "Infinity"
    }
  ],
  "__elements": {},
  "__requires": [
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "12.1.0"
    },
    {
      "type": "panel",
      "id": "marcusolsson-calendar-panel",
      "name": "Business Calendar",
      "version": "3.9.1"
    },
    {
      "type": "panel",
      "id": "marcusolsson-dynamictext-panel",
      "name": "Business Text",
      "version": "5.7.0"
    },
    {
      "type": "panel",
      "id": "text",
      "name": "Text",
      "version": ""
    },
    {
      "type": "panel",
      "id": "volkovlabs-form-panel",
      "name": "Business Forms",
      "version": "5.1.0"
    },
    {
      "type": "datasource",
      "id": "yesoreyeram-infinity-datasource",
      "name": "Infinity",
      "version": "3.3.0"
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 5,
        "x": 0,
        "y": 0
      },
      "id": 18,
      "maxDataPoints": 1,
      "options": {
        "annotations": false,
        "annotationsLimit": 100,
        "annotationsType": "",
        "colors": "event",
        "dateFormat": "en",
        "defaultView": "month",
        "descriptionField": [
          "description"
        ],
        "displayFields": [
          "description",
          "time",
          "location",
          "text",
          "links"
        ],
        "endTimeField": "end",
        "endTimeRange": "2025-02-05T22:02:34.060Z",
        "locationField": "location",
        "locationLabel": "",
        "preformattedDescription": false,
        "quickLinks": false,
        "scrollToTime": {
          "hours": 12,
          "minutes": 0
        },
        "showEventTooltip": true,
        "showMonthTime": true,
        "startTimeRange": "2024-12-31T23:00:00.000Z",
        "textField": "summary",
        "timeField": "start",
        "timeRangeType": "variable",
        "views": [
          "month"
        ]
      },
      "pluginVersion": "3.9.1",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "queryType": "randomWalk",
          "refId": "A"
        }
      ],
      "title": "Calendar",
      "transformations": [
        {
          "id": "convertFieldType",
          "options": {
            "conversions": [
              {
                "dateFormat": "YYYYMMDDTHHmmss",
                "destinationType": "time",
                "targetField": "end"
              },
              {
                "dateFormat": "YYYYMMDDTHHmmss",
                "destinationType": "time",
                "targetField": "start"
              }
            ],
            "fields": {}
          }
        },
        {
          "id": "joinByField",
          "options": {
            "byField": "end",
            "mode": "outer"
          }
        }
      ],
      "transparent": true,
      "type": "marcusolsson-calendar-panel"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 14,
        "x": 5,
        "y": 0
      },
      "id": 20,
      "maxDataPoints": 1,
      "options": {
        "afterRender": "",
        "content": "<div style=\"display: flex; width: 100%; align-items: center;\">\n  <select class=\"searchEngineSelect\" id=\"searchEngineSelect\">\n    <option value=\"https://google.com/search?q=\">Google</option>\n    <option value=\"https://www.bing.com/search?q=\">Bing</option>\n    <option value=\"https://duckduckgo.com/?q=\">DuckDuckGo</option>\n    <option value=\"https://www.ecosia.org/search?q=\">Ecosia</option>\n    <option value=\"https://search.brave.com/search?q=\">Brave</option>\n    <option value=\"https://www.perplexity.ai/?q=\">Perplexity AI</option>\n  </select>\n  <input class=\"customSearchInput\" id=\"customSearchInput\" \n    type=\"text\" \n    placeholder=\"Enter search terms...\" \n    onkeydown=\"if(event.key==='Enter'){\n      event.preventDefault();\n      const query = this.value.trim();\n      if(query) {\n        const searchEngine = document.getElementById('searchEngineSelect').value;\n        window.open(searchEngine + encodeURIComponent(query), '_blank');\n      }\n    }\"/>\n  <button class=\"customSearchButton\"\n    onclick=\"\n      const query = document.getElementById('customSearchInput').value.trim();\n      if(query) {\n        const searchEngine = document.getElementById('searchEngineSelect').value;\n        window.open(searchEngine + encodeURIComponent(query), '_blank');\n      }\n    \">\n    Search\n  </button>\n</div>\n",
        "contentPartials": [],
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "auto",
          "language": "markdown"
        },
        "editors": [
          "styles",
          "afterRender",
          "helpers"
        ],
        "externalStyles": [],
        "helpers": "",
        "renderMode": "everyRow",
        "styles": ".searchEngineSelect {\r\n  height: auto;\r\n  color: rgb(163, 163, 163); \r\n  padding: 10px;\r\n  border: none;\r\n  border-top-left-radius: 15px;\r\n  border-bottom-left-radius: 15px;\r\n  border: 1px solid rgba(255,255,255,0.1);\r\n  margin-right: 8px;\r\n  transition: all 0.2s ease;\r\n  background: rgba(0,0,0,0.4);\r\n  width: 150px;\r\n}\r\n\r\n.customSearchInput:focus, \r\n.searchEngineSelect:focus {\r\n  outline: rgb(0 124 255 / 50%) solid 1px;\r\n  outline-offset: -1px;\r\n}\r\n\r\n.searchEngineSelect:hover {\r\n  border: 1px solid rgba(255,255,255,0.3);\r\n}\r\n\r\n.searchEngineSelect option {\r\n  background: rgb(20, 20, 20);\r\n}\r\n\r\n.customSearchInput {\r\n  flex: 1;\r\n  padding: 8px;\r\n  border: 1px solid rgba(255,255,255,0.1);\r\n  transition: all 0.2s ease;\r\n  background: rgba(0,0,0,0.4);\r\n}\r\n.customSearchInput:hover {\r\n  border: 1px solid rgba(255,255,255,0.3);\r\n}\r\n\r\n.customSearchButton {\r\n  margin-left: 8px; \r\n  padding: 8px 16px; \r\n  background: #1a304e84; \r\n  color: #ccc; \r\n  border: 1px solid rgba(255,255,255,0.1);\r\n  border-top-right-radius: 15px;\r\n  border-bottom-right-radius: 15px;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n}\r\n.customSearchButton:hover{\r\n  border: 1px solid rgba(255,255,255,0.3);\r\n}",
        "wrap": true
      },
      "pluginVersion": "5.7.0",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "queryType": "randomWalk",
          "refId": "A"
        }
      ],
      "transparent": true,
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "description": "DO NOT REMOVE! DASHBOARD STYLES INSIDE!",
      "gridPos": {
        "h": 4,
        "w": 5,
        "x": 19,
        "y": 0
      },
      "id": 2,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<div class=\"weather-widget\">\r\n  \r\n<div id=\"ww_9acad67c949ed\" v='1.3' loc='auto' a='{\"t\":\"horizontal\",\"lang\":\"en\",\"sl_lpl\":1,\"ids\":[],\"font\":\"Arial\",\"sl_ics\":\"one_a\",\"sl_sot\":\"celsius\",\"cl_bkg\":\"rgba(255,255,255,0)\",\"cl_font\":\"#FFFFFF\",\"cl_cloud\":\"#FFFFFF\",\"cl_persp\":\"#81D4FA\",\"cl_sun\":\"#FFC107\",\"cl_moon\":\"#FFC107\",\"cl_thund\":\"#FF5722\",\"el_nme\":3,\"el_phw\":3}'>More forecasts: <a href=\"https://oneweather.org/orlando/30_days/\" id=\"ww_9acad67c949ed_u\" target=\"_blank\">Orlando weather 30 day</a></div><script async src=\"https://app3.weatherwidget.org/js/?id=ww_9acad67c949ed\"></script>\r\n\r\n</div>\r\n\r\n\r\n<style>\r\n  /* Dashboard Styles */\r\n\r\n  [data-testid=\"data-testid Panel header \"] [data-testid=\"data-testid panel\"],\r\n  [data-testid=\"data-testid Panel header \"] [data-testid=\"data-testid text content\"] {\r\n    padding: 0;\r\n  }\r\n\r\n  /* Default sticky positioning */\r\n  .react-grid-item:has(.custom-nav) {\r\n    position: sticky !important;\r\n    top: 80px;\r\n    z-index: 1000;\r\n    padding: 0;\r\n    border-bottom-left-radius: 15px;\r\n    border-bottom-right-radius: 15px;\r\n    height: 45px !important;\r\n    margin-top: -40px;\r\n  }\r\n\r\n  .react-grid-item {\r\n    contain: layout style;\r\n    padding: 5px 10px;\r\n  }\r\n\r\n  .custom-nav,\r\n  .react-grid-item:has(.custom-nav),\r\n  [data-testid*=\"panel content\"] {\r\n    transform: translateZ(0);\r\n    will-change: transform;\r\n  }\r\n\r\n  [data-testid*=\"Panel header\"]:has(.custom-nav) {\r\n    border: none !important;\r\n  }\r\n\r\n  [data-testid=\"data-testid panel\"]:has(.custom-nav) {\r\n    backdrop-filter: blur(8px);\r\n    will-change: backdrop-filter;\r\n    contain: layout style paint;\r\n    border-bottom-left-radius: 15px;\r\n    border-bottom-right-radius: 15px;\r\n  }\r\n\r\n  /* Kiosk mode overrides */\r\n  body:not(:has(header)) .react-grid-item:has(.custom-nav) {\r\n    top: 0 !important;\r\n  }\r\n\r\n  [class*=\"-hover-container-widget\"] {\r\n    box-shadow: none;\r\n  }\r\n\r\n  .rbc-calendar .rbc-event-content {\r\n    opacity: 0;\r\n  }\r\n\r\n  .rbc-calendar .rbc-event {\r\n    margin-top: -20px;\r\n    background-color: transparent !important;\r\n    background: linear-gradient(to right, transparent, #028440 20%, #028440 80%, transparent 100%) bottom;\r\n    background-size: 100% 2px;\r\n    background-repeat: no-repeat;\r\n    height: 100% !important;\r\n    max-width: inherit;\r\n  }\r\n\r\n  .rbc-calendar .rbc-date-cell {\r\n    text-align: center;\r\n    padding: 0;\r\n    transition: background-color 0.2s ease-out;\r\n  }\r\n\r\n  .rbc-date-cell:hover {\r\n    background-color: rgb(255 255 255 / 10%);\r\n  }\r\n\r\n  .rbc-calendar .rbc-date-cell.rbc-now {\r\n    background: rgb(57 118 204 / 50%);\r\n  }\r\n\r\n  .rbc-calendar .rbc-month-view {\r\n    border-radius: 8px;\r\n  }\r\n\r\n  .rbc-calendar .rbc-row-bg>div:last-child {\r\n    border-bottom-right-radius: 8px;\r\n  }\r\n\r\n  .rbc-calendar [type=\"button\"] span {\r\n    font-size: 0.8rem;\r\n  }\r\n\r\n  .rbc-calendar [type=\"button\"] {\r\n    height: 20px;\r\n  }\r\n\r\n  .rbc-calendar>*>span {\r\n    font-size: 0.9rem;\r\n    line-height: 1;\r\n    max-width: 45px !important;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    margin: 4px 0;\r\n  }\r\n\r\n  .rbc-calendar button.rbc-button-link {\r\n    font-size: 0.8rem;\r\n  }\r\n\r\n  .rbc-calendar .rbc-row-content {\r\n    overflow: hidden;\r\n  }\r\n\r\n  .rbc-calendar>div:first-child {\r\n    margin: 0px 8px 2px;\r\n  }\r\n\r\n  .rbc-event {\r\n    position: absolute;\r\n    bottom: 0;\r\n    max-width: 41px;\r\n    z-index: 0;\r\n    border-radius: 0;\r\n    height: 4px;\r\n    opacity: 0.8;\r\n  }\r\n\r\n  [class*=\"-canvas-wrapper-old\"]>div>div {\r\n    padding: 0;\r\n  }\r\n\r\n  [data-testid*=\"dashboard controls\"] {\r\n    position: absolute;\r\n    width: fit-content;\r\n    right: 0;\r\n  }\r\n\r\n  .react-grid-item:has(h2[title=\"Subreddits_formatted\"]) {\r\n    display: none;\r\n  }\r\n\r\n  [data-testid*=\"RefreshPicker run button\"] div {\r\n    display: none;\r\n  }\r\n\r\n  [data-testid*=\"RefreshPicker run button\"] {\r\n    width: auto !important;\r\n    border-bottom-left-radius: 50%;\r\n  }\r\n\r\n  .button-group:has([data-testid*=\"TimePicker Open Button\"]) {\r\n    display: none;\r\n  }\r\n\r\n  [data-testid=\"data-testid panel button-submit\"] {\r\n    background: rgb(47 103 172 / 41%);\r\n    border-radius: 8px;\r\n    margin-top: 5px;\r\n  }\r\n\r\n  [data-testid*=\"button-view\"] {\r\n    align-content: center;\r\n    justify-content: flex-end;\r\n  }\r\n\r\n  [data-testid*=\"button-view\"] [type=\"button\"] {\r\n    border-radius: 8px;\r\n  }\r\n\r\n  [data-testid*=\"panel content\"] * [class*=\"input-wrapper\"] {\r\n    border-radius: 8px;\r\n    margin: 2px;\r\n    background: rgb(24 27 31 / 50%);\r\n    border: solid 1px rgba(204, 204, 220, 0.3);\r\n  }\r\n\r\n  [data-testid*=\"panel content\"] div[title*=\"metrics\"] {\r\n    padding: 0px !important;\r\n  }\r\n\r\n  [data-testid*=\"panel content\"] * label {\r\n    color: #ddd;\r\n    background: none;\r\n    border: none;\r\n    margin: 2px;\r\n  }\r\n\r\n  [class*=\"-body\"] {\r\n    max-width: 1600px;\r\n    margin-inline: auto;\r\n    width: 100%;\r\n    padding: 0 0 16px 0;\r\n  }\r\n\r\n  [class*=\"-canvas-wrapper-old\"]>div>div {\r\n    padding: 0;\r\n  }\r\n\r\n  .react-grid-item {\r\n    padding: 5px 10px;\r\n  }\r\n\r\n  [data-testid=\"data-testid panel\"]:has([class=\"searchEngineSelect\"]) {\r\n    padding: 0;\r\n  }\r\n\r\n  [data-testid=\"data-testid panel\"] {\r\n    padding-top: 10px;\r\n  }\r\n\r\n  [data-testid=\"data-testid panel\"]:has([data-testid=\"data-testid text content\"]) {\r\n    -webkit-mask-image: linear-gradient(to bottom, black 95%, transparent 100%);\r\n    mask-image: linear-gradient(to bottom, black 95%, transparent 100%);\r\n  }\r\n\r\n  [class*=-panel-title] h2 {\r\n    color: rgba(162, 162, 162, 0.9);\r\n    font-weight: 600;\r\n    text-shadow: 0 0 4px rgba(0, 0, 0, 0.8);\r\n    overflow: visible;\r\n  }\r\n\r\n  [data-testid=\"data-testid form-elements field-textarea\"],\r\n  [data-testid*=\"text-variable\"] {\r\n    background: rgba(0, 0, 0, 0.7);\r\n    border-radius: 8px;\r\n    line-height: 1.5;\r\n  }\r\n\r\n  [data-testid*=\"panel content\"]:has(.weather-widget) .markdown-html {\r\n    overflow: hidden;\r\n  }\r\n\r\n  [data-testid*=\"panel content\"]:has(.weather-widget) {\r\n    padding: 0 !important;\r\n  }\r\n\r\n  [data-testid*=\"panel content\"]:has(.weather-widget) .ww-box {\r\n    transform: scale(0.8);\r\n    margin-top: -12px !important;\r\n    padding: 0 !important;\r\n  }\r\n\r\n  [class*=\"-page-wrapper\"] {\r\n    position: relative;\r\n    /* Remove background-attachment: fixed; */\r\n    /* Remove background-image: url(public/img/glancy-wp.png); */\r\n  }\r\n\r\n  /* Create fixed background layer */\r\n  [class*=\"-page-wrapper\"]:before {\r\n    content: '';\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-image: url(public/img/glancy-wp.png);\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n    z-index: -10;\r\n    transform: translateZ(0);\r\n    will-change: transform;\r\n  }\r\n\r\n  [class^=\"css\"]:has([data-testid=\"data-testid dashboard controls\"]) {\r\n    background-color: transparent;\r\n  }\r\n\r\n  [class$=\"panel-container\"]:not([class$=\"panel-container-panel-transparent-container\"]) {\r\n    background: none;\r\n    border: none;\r\n  }\r\n\r\n  :not([class*=\"transparent\"])>[data-testid*=\"panel content\"] {\r\n    background-color: rgba(5, 5, 5, 0.75);\r\n    box-shadow: 0 0 18px rgba(0, 0, 0, 0.5);\r\n    border-radius: 10px !important;\r\n    border: solid 1px rgb(30 30 30);\r\n    transform: translateZ(0);\r\n    will-change: transform;\r\n  }\r\n\r\n  .scene-resize-handle:not(:hover) {\r\n    opacity: 0;\r\n  }\r\n\r\n  [class$=\"panel-container-panel-transparent-container\"]:hover {\r\n    border: 1px solid transparent;\r\n  }\r\n\r\n  [class*=\"-toolbar-button-panel-menu\"] {\r\n    position: absolute;\r\n    right: 0;\r\n  }\r\n\r\n  .show-on-hover {\r\n    background: none;\r\n    border: 0;\r\n    height: 24px;\r\n  }\r\n\r\n  [data-testid*=\"text content\"]>div {\r\n    overflow-x: hidden;\r\n  }\r\n\r\n  [data-testid=\"data-testid panel\"]>div,\r\n  .twitch-container {\r\n    scrollbar-width: none !important;\r\n  }\r\n\r\n  ::-webkit-scrollbar {\r\n    width: 8px;\r\n    height: 8px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-track {\r\n    background: #f1f1f1;\r\n    border-radius: 10px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-thumb {\r\n    background: #888;\r\n    border-radius: 10px;\r\n    transition: background 0.3s;\r\n  }\r\n\r\n  ::-webkit-scrollbar-thumb:hover {\r\n    background: #555;\r\n  }\r\n\r\n  ::-webkit-scrollbar-button {\r\n    display: none;\r\n  }\r\n\r\n  [class*=\"-panel-header\"] {\r\n    text-shadow: 0 0 5px black !important;\r\n    padding-right: 20px;\r\n  }\r\n\r\n  [class*=\"-panel-header\"]:after {\r\n    content: \"\";\r\n    display: inline-block;\r\n    height: 4px;\r\n    background: #5d5d5d33;\r\n    flex-grow: 1;\r\n    margin-left: 5px;\r\n  }\r\n\r\n  [data-testid*=\"panel content\"]:has(.hr-text-container) {\r\n    padding: 0 !important;\r\n  }\r\n\r\n  .hr-text-container {\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: auto;\r\n    position: absolute;\r\n    margin: 0;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n\r\n  .hr-left {\r\n    flex-grow: 1;\r\n    height: 2px;\r\n    background: linear-gradient(to right, transparent, #00ccff);\r\n  }\r\n\r\n  .text {\r\n    color: #ddd;\r\n    padding: 0 10px;\r\n    font-weight: 500;\r\n    font-size: 18px;\r\n  }\r\n\r\n  .hr-right {\r\n    flex-grow: 1;\r\n    height: 2px;\r\n    background: linear-gradient(to left, transparent, #00ccff);\r\n  }\r\n\r\n  [data-viz-panel-key=\"panel-6\"] .gf-form>*>[class$=\"horizontal-group\"] {\r\n    justify-content: center !important;\r\n  }\r\n\r\n  [data-viz-panel-key=\"panel-8\"] [class$=\"panel-content\"],\r\n  [data-viz-panel-key=\"panel-6\"] [class$=\"panel-content\"] {\r\n    padding: 0 !important;\r\n  }\r\n\r\n  div#\\:r10\\: {\r\n    padding: 0 !important;\r\n    margin: 0 !important;\r\n  }\r\n\r\n  [data-testid*=\"panel content\"] [data-testid*=\"button-view\"] {\r\n    overflow: visible;\r\n    height: unset;\r\n  }\r\n\r\n  [data-testid*=\"panel content\"] [data-testid*=\"button-view\"] [type=button] {\r\n    border-radius: 8px;\r\n  }\r\n\r\n  .gf-form>*:has(> [class$=\"horizontal-group\"]) {\r\n    height: auto;\r\n    overflow: visible;\r\n  }\r\n\r\n  .gf-form>*>[class$=\"horizontal-group\"]>*>button {\r\n    border-radius: 10px;\r\n    background: rgba(30, 30, 30, 0.5);\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\r\n  }\r\n\r\n  .gf-form>*>[class$=\"horizontal-group\"]>*>button:hover {\r\n    background: rgba(50, 50, 50, 0.5);\r\n  }\r\n</style>",
        "mode": "html"
      },
      "pluginVersion": "12.1.0",
      "transparent": true,
      "type": "text"
    },
    {
      "datasource": {
        "type": "yesoreyeram-infinity-datasource",
        "uid": "${DS_REDDIT_API}"
      },
      "fieldConfig": {
        "defaults": {
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 15,
        "w": 14,
        "x": 5,
        "y": 2
      },
      "id": 10,
      "options": {
        "afterRender": "// Show loading animation, then reveal content\r\nsetTimeout(() => {\r\n  const redditContainer = document.querySelector('.reddit-container');\r\n  if (redditContainer) {\r\n    redditContainer.classList.add('loaded');\r\n  }\r\n}, 1000);\r\n",
        "content": "<div class=\"reddit-container\">\n  <div class=\"loading-container\">\n    <div class=\"semipolar-spinner\">\n      <div class=\"ring\"></div>\n      <div class=\"ring\"></div>\n      <div class=\"ring\"></div>\n      <div class=\"ring\"></div>\n      <div class=\"ring\"></div>\n    </div>\n    <div class=\"loading-text\">Loading Subreddits...</div>\n  </div>\n  <div class=\"reddit-content\">\n    <div class=\"reddit-posts\">\n      {{#each data}}\n        {{#unless (isStickied stickied)}}\n        <div class=\"subreddit-container\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" width=\"20\" height=\"20\" class=\"subreddit-icon\">\n            <path fill=\"currentColor\" d=\"M 10 0 a 10 10 0 1 0 10 10 A 10.011 10.011 0 0 0 10 0 Z M 8.016 8.633 a 1.616 1.616 0 0 0 -0.2 0.806 V 13.5 H 5.931 V 6.172 h 1.8 v 0.9 h 0.039 a 3.009 3.009 0 0 1 1.018 -0.732 a 3.45 3.45 0 0 1 1.449 -0.284 c 0.246 -0.003 0.491 0.02 0.732 0.068 c 0.158 0.024 0.309 0.08 0.444 0.164 l -0.759 1.832 a 2.09 2.09 0 0 0 -1.093 -0.26 c -0.33 -0.01 -0.658 0.062 -0.954 0.208 a 1.422 1.422 0 0 0 -0.591 0.565 Z m 2.9 6.918 H 9.355 L 14.7 2.633 c 0.426 0.272 0.828 0.58 1.2 0.922 l -4.984 11.996 Z\"/>\n          </svg>\n          <a href=\"https://www.reddit.com/r/{{subreddit}}\" target=\"_blank\" class=\"subreddit\">{{subreddit}}</a>\n          <div class=\"timestamp\">&bull; {{timeAgo created_x}} &bull; by <a href=\"https://www.reddit.com/u/{{author}}\" target=\"_blank\" class=\"author\">{{author}}</a></div>\n        </div>\n        <div class=\"post-container\">\n          <h3 class=\"post-title\">\n            <a href=\"https://www.reddit.com{{permalink}}\" target=\"_blank\">{{title}}</a>\n            <span class=\"post-metadata\">\n              <span class=\"post-score {{#if (isPositiveScore score)}}positive{{else}}negative{{/if}}\">&#9650;&nbsp;&nbsp;{{score}}&nbsp;&nbsp;&#9660;</span>\n              <span class=\"post-comments\"><span class=\"comment-icon\">&#128172;</span> {{num_comments}}</span>\n            </span>\n          </h3>\n            {{#if (isGalleryPost is_gallery)}}\n              <div style=\"display: flex; flex-wrap: wrap; gap: 10px; justify-content: center; margin: 10px 0;\">\n                {{#each (getGalleryImages this)}}\n                  <div class=\"gallery-image-item\" style=\"flex: 0 0 calc(33% - 10px); max-width: 250px; border-radius: 8px; overflow: hidden; box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\">\n                    <img src=\"{{url}}\" alt=\"Gallery image\" style=\"width: 100%; height: auto; display: block;\" loading=\"lazy\">\n                  </div>\n                {{/each}}\n              </div>\n            {{else}}\n            <div class=\"content-image-container {{#if (isEmptyContent selftext_html)}}empty-content{{/if}} {{#if (isImagePost post_hint)}}image-post{{/if}}\">\n              {{#unless (isImagePost post_hint)}}\n                <div class=\"post-content\">\n                  {{#if (isExternalLink post_hint)}}\n                    <a href=\"{{url}}\" target=\"_blank\" rel=\"noopener noreferrer\">{{url}}</a>\n                  {{else}}\n                    {{{extractRedditContent selftext_html}}}\n                  {{/if}}\n                </div>\n              {{/unless}}\n              {{#if (getImageUrl this)}}\n                <div class=\"post-image\">\n                  <div class=\"image-wrapper\">\n                    <img src=\"{{getImageUrl this}}\" alt=\"{{title}}\" loading=\"lazy\">\n                  </div>\n                </div>\n              {{/if}}\n            </div>\n          {{/if}}\n        </div>\n        <hr>\n        {{/unless}}\n      {{/each}}\n    </div>\n  </div>\n</div>\n",
        "contentPartials": [],
        "defaultContent": "<center><h3>Nothing to see here...</h3></center>\r\n\r\n<p>Add Subreddits or use the Refresh button</p>",
        "editor": {
          "format": "auto",
          "language": "markdown"
        },
        "editors": [
          "default",
          "helpers",
          "afterRender",
          "styles"
        ],
        "externalStyles": [],
        "helpers": "// timeAgo HELPER\r\ncontext.handlebars.registerHelper('timeAgo', function (timestamp) {\r\n  if (!timestamp) return '';\r\n\r\n  const date = new Date(timestamp * 1000); // Reddit uses Unix timestamps\r\n  const now = new Date();\r\n  const diffMs = now - date;\r\n\r\n  // Convert to seconds\r\n  const diffSec = Math.floor(diffMs / 1000);\r\n\r\n  if (diffSec < 60) return 'just now';\r\n  if (diffSec < 3600) return Math.floor(diffSec / 60) + ' minutes ago';\r\n  if (diffSec < 86400) return Math.floor(diffSec / 3600) + ' hours ago';\r\n  if (diffSec < 2592000) return Math.floor(diffSec / 86400) + ' days ago';\r\n  if (diffSec < 31536000) return Math.floor(diffSec / 2592000) + ' months ago';\r\n  return Math.floor(diffSec / 31536000) + ' years ago';\r\n});\r\n\r\n// Check if post is stickied\r\ncontext.handlebars.registerHelper('isStickied', function (stickied) {\r\n  return stickied === true;\r\n});\r\n\r\n// Check if content is empty\r\ncontext.handlebars.registerHelper('isEmptyContent', function (content) {\r\n  return !content || content.trim() === '';\r\n});\r\n\r\n// Check if post is an external link\r\ncontext.handlebars.registerHelper('isExternalLink', function (post_hint) {\r\n  return post_hint === 'link';\r\n});\r\n\r\n// Extract Reddit content from HTML\r\ncontext.handlebars.registerHelper('extractRedditContent', function (html_content) {\r\n  if (!html_content) return '';\r\n\r\n  return html_content\r\n    .replace(/&lt;/g, '<')\r\n    .replace(/&gt;/g, '>')\r\n    .replace(/&quot;/g, '\"')\r\n    .replace(/&#39;/g, \"'\")\r\n    .replace(/&amp;/g, '&');\r\n});\r\n\r\n// Check if post is an image post\r\ncontext.handlebars.registerHelper('isImagePost', function (post_hint) {\r\n  return post_hint === 'image';\r\n});\r\n\r\n// Check if score is positive\r\ncontext.handlebars.registerHelper('isPositiveScore', function (score) {\r\n  return score >= 0;\r\n});\r\n\r\n// Get the best image URL from available resolutions\r\ncontext.handlebars.registerHelper('getImageUrl', function (post) {\r\n  try {\r\n    // Check if we have preview images data\r\n    if (post['preview.images[0].resolutions']) {\r\n      // Parse the JSON string if it's a string\r\n      let resolutions = post['preview.images[0].resolutions'];\r\n\r\n      // Skip parsing if it's \"Not Found\"\r\n      if (resolutions === \"Not Found\") {\r\n        return '';\r\n      }\r\n\r\n      if (typeof resolutions === 'string') {\r\n        resolutions = JSON.parse(resolutions);\r\n      }\r\n\r\n      // If we have an array of resolutions\r\n      if (Array.isArray(resolutions) && resolutions.length > 0) {\r\n        // Look for the 640px width image (index 3)\r\n        if (resolutions.length > 3 && resolutions[3].width === 640) {\r\n          return resolutions[3].url\r\n            .replace(/&amp;/g, '&'); // Fix encoded ampersands\r\n        }\r\n\r\n        // Fallback to the largest available image\r\n        const lastIndex = resolutions.length - 1;\r\n        return resolutions[lastIndex].url\r\n          .replace(/&amp;/g, '&');\r\n      }\r\n    }\r\n\r\n    // Fallback to thumbnail if available\r\n    if (post.thumbnail && post.thumbnail.startsWith('http')) {\r\n      return post.thumbnail;\r\n    }\r\n\r\n    return '';\r\n  } catch (e) {\r\n    console.error('Error getting image URL:', e);\r\n    return '';\r\n  }\r\n});\r\n\r\n// Check if post is a gallery post\r\ncontext.handlebars.registerHelper('isGalleryPost', function (is_gallery) {\r\n  return is_gallery === true;\r\n});\r\n\r\ncontext.handlebars.registerHelper('getGalleryImages', function (post) {\r\n  try {\r\n    if (!post.is_gallery || !post.media_metadata || !post.gallery_data) {\r\n      return [];\r\n    }\r\n\r\n    const galleryData = typeof post.gallery_data === 'string' ?\r\n      JSON.parse(post.gallery_data) : post.gallery_data;\r\n\r\n    const mediaMetadata = typeof post.media_metadata === 'string' ?\r\n      JSON.parse(post.media_metadata) : post.media_metadata;\r\n\r\n    if (!galleryData.items || !Array.isArray(galleryData.items)) {\r\n      return [];\r\n    }\r\n\r\n    return galleryData.items.map(item => {\r\n      const mediaId = item.media_id;\r\n      if (mediaMetadata[mediaId] && mediaMetadata[mediaId].p && mediaMetadata[mediaId].p.length > 0) {\r\n        // Find the image with width closest to 640px (index 3 typically)\r\n        const imageIndex = Math.min(3, mediaMetadata[mediaId].p.length - 1);\r\n        // Properly decode HTML entities in the URL\r\n        const url = mediaMetadata[mediaId].p[imageIndex].u\r\n          .replace(/&amp;/g, '&')\r\n          .replace(/&lt;/g, '<')\r\n          .replace(/&gt;/g, '>')\r\n          .replace(/&quot;/g, '\"');\r\n        return {\r\n          url: url,\r\n          caption: item.caption || ''\r\n        };\r\n      }\r\n      return null;\r\n    }).filter(img => img !== null);\r\n  } catch (e) {\r\n    console.error('Error extracting gallery images:', e);\r\n    return [];\r\n  }\r\n});\r\n\r\n",
        "renderMode": "allRows",
        "styles": ".reddit-content {\r\n  padding: 0 5px;\r\n}\r\na:link {\r\n  color: #93c1d1;\r\n}\r\n.post-title {\r\n  margin: 0 0 10px 0;\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n.post-title a {\r\n  text-decoration: none;\r\n  color: #F2F4F5;\r\n  font-size: 1.2rem;\r\n  font-weight: 500;\r\n}\r\n.post-metadata {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  font-size: 0.8rem;\r\n  min-width: fit-content;\r\n}\r\n\r\n.post-comments {\r\n  color: #93c1d1;\r\n  font-weight: 400;\r\n  border: solid 1px rgba(255, 255, 255, 0.168);\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);\r\n  background: rgba(35,35,45,0.5);\r\n  padding: 4px;\r\n}\r\n\r\n.subreddit-container {\r\n  display: inline-flex;\r\n  align-items: center;\r\n}\r\n.subreddit-container a {\r\n  color: #b7cad4;\r\n}\r\n.subreddit-icon {\r\n  color: #b7cad4;\r\n}\r\n.subreddit {\r\n  font-size: 0.8em;\r\n  display: inline;\r\n}\r\n.timestamp {\r\n  font-size: 0.8em;\r\n  color:#8ba2ad;\r\n  display: inline;\r\n}\r\n.subreddit, .post-content, .post-title {\r\n  padding: 0 5px !important;\r\n}\r\n\r\n.post-container {\r\n  height: 100%;\r\n}\r\n.post-content {\r\n  flex: 1;\r\n  max-height: 200px;\r\n  overflow: hidden;\r\n  position: relative;\r\n  color: #B8C5C9;\r\n  font-size: .875rem;\r\n  line-height: 1.25rem;\r\n  -webkit-mask-image: linear-gradient(to bottom, black 70%, transparent 100%);\r\n  mask-image: linear-gradient(to bottom, black 70%, transparent 100%);\r\n}\r\n.post-content h3 {\r\n  font-size: 1.1rem;\r\n}\r\n.post-content h2 {\r\n  font-size: 1.2rem;\r\n}\r\n.post-content h1 {\r\n  font-size: 1.3rem;\r\n}\r\n.post-content table, .post-content table td {\r\n  border: 0;\r\n}\r\n\r\n/* Default layout (thumbnail on right) */\r\n.content-image-container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: flex-start;\r\n  gap: 15px;\r\n}\r\n/* Gallery styles */\r\n.gallery-container {\r\n  margin: 10px 0;\r\n  width: 100%;\r\n}\r\n\r\n.gallery-images {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n  justify-content: center;\r\n}\r\n\r\n.gallery-image-wrapper {\r\n  position: relative;\r\n  width: calc(50% - 5px);\r\n  max-width: 400px;\r\n  margin-bottom: 10px;\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n  box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.gallery-image-wrapper img {\r\n  width: 100%;\r\n  height: auto;\r\n  object-fit: cover;\r\n  display: block;\r\n  transition: transform 0.5s ease-in;\r\n}\r\n\r\n.gallery-image-wrapper:hover img {\r\n  transform: scale(1.005);\r\n}\r\n\r\n.gallery-caption {\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background: rgba(0, 0, 0, 0.7);\r\n  color: white;\r\n  padding: 5px 10px;\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.gallery-image-item img {\r\n  transition: transform 0.5s ease;\r\n  will-change: transform;\r\n}\r\n\r\n.gallery-image-item:hover img {\r\n  transform: scale(1.01);\r\n}\r\n\r\n/* For mobile screens */\r\n@media (max-width: 768px) {\r\n  .gallery-image-wrapper {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n.post-image {\r\n  width: 175px;\r\n  height: 175px;\r\n  flex-shrink: 0;\r\n  overflow: visible;\r\n  will-change: transform;\r\n}\r\n.image-wrapper {\r\n  width: fit-content;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);\r\n\r\n}\r\n.post-image img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  transition: transform 0.5s ease;\r\n  will-change: transform;\r\n  \r\n}\r\n\r\n.post-image:hover img {\r\n  transform: scale(1.005);\r\n}\r\n\r\n.post-image a {\r\n  display: block;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.image-post {\r\n  flex-direction: column;\r\n}\r\n\r\n.image-post .post-content {\r\n  max-height: 30px; \r\n}\r\n\r\n.image-post .post-image {\r\n  width: 100%;\r\n  height: auto;\r\n  max-height: 400px;\r\n  text-align: center;\r\n  text-align: -webkit-center;\r\n}\r\n.image-post .image-wrapper {\r\n  height: auto;\r\n  max-height: 400px;\r\n  border-radius: 15px;\r\n}\r\n.image-post .post-image img {\r\n  width: 100%;\r\n  height: auto;\r\n  max-height: 400px;\r\n  object-fit: contain;\r\n    border-radius: 15px;\r\n}\r\n\r\n.empty-content {\r\n  justify-content: center;\r\n}\r\n\r\n.empty-content .post-content {\r\n  display: none;\r\n}\r\n\r\n.empty-content .post-image {\r\n  width: auto;\r\n  height: auto;\r\n  max-width: 100%;\r\n  max-height: 350px;\r\n}\r\n\r\n.empty-content .post-image img {\r\n  width: auto;\r\n  height: auto;\r\n  max-width: 100%;\r\n  max-height: 350px;\r\n  object-fit: contain;\r\n}\r\n\r\n.post-score, .post-comments {\r\n  color: rgba(150, 184, 194, 0.8);\r\n  border: solid 1px rgba(255, 255, 255, 0.168);\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);\r\n  background: rgba(35,35,45,0.5);\r\n  padding: 4px;\r\n}\r\nspan.post-comments:not(.comment-icon) {\r\n    padding-right: 6px;\r\n}\r\n.comment-icon {\r\n  opacity: 0.7;\r\n}\r\n.post-score.negative {\r\n  color: rgba(157, 124, 74, 0.8);\r\n}\r\n\r\n.loading-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 200px;\r\n  width: 100%;\r\n  opacity: 1;\r\n  transition: opacity 0.5s ease-in-out;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 10;\r\n}\r\n\r\n.loading-text {\r\n  margin-top: 15px;\r\n  color: #b0b0b0;\r\n  font-size: 14px;\r\n}\r\n\r\n.reddit-container {\r\n  position: relative;\r\n}\r\n\r\n.reddit-container .reddit-content {\r\n  display: block;\r\n  opacity: 0;\r\n  transition: opacity 0.5s ease-in;\r\n}\r\n\r\n.reddit-container.loaded .reddit-content {\r\n  opacity: 1;\r\n}\r\n\r\n.reddit-container.loaded .loading-container {\r\n  opacity: 0;\r\n  pointer-events: none;\r\n  display: none;\r\n}\r\n\r\n/* Loading Spinner */\r\n.semipolar-spinner, .semipolar-spinner * {\r\n  box-sizing: border-box;\r\n}\r\n\r\n.semipolar-spinner {\r\n  height: 40px;\r\n  width: 40px;\r\n  position: relative;\r\n  transition: transform 0.5s ease-out;\r\n}\r\n\r\n.semipolar-spinner .ring {\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  border: calc(40px * 0.05) solid transparent;\r\n  border-top-color: rgba(0, 162, 255, 0.5);\r\n  border-left-color: rgba(0, 162, 255, 0.5);\r\n  animation: semipolar-spinner-animation 2s infinite;\r\n}\r\n\r\n.semipolar-spinner .ring:nth-child(1) {\r\n  height: calc(40px - 40px * 0.2 * 0);\r\n  width: calc(40px - 40px * 0.2 * 0);\r\n  top: calc(40px * 0.1 * 0);\r\n  left: calc(40px * 0.1 * 0);\r\n  animation-delay: calc(2000ms * 0.1 * 4);\r\n  z-index: 5;\r\n}\r\n\r\n.semipolar-spinner .ring:nth-child(2) {\r\n  height: calc(40px - 40px * 0.2 * 1);\r\n  width: calc(40px - 40px * 0.2 * 1);\r\n  top: calc(40px * 0.1 * 1);\r\n  left: calc(40px * 0.1 * 1);\r\n  animation-delay: calc(2000ms * 0.1 * 3);\r\n  z-index: 4;\r\n}\r\n\r\n.semipolar-spinner .ring:nth-child(3) {\r\n  height: calc(40px - 40px * 0.2 * 2);\r\n  width: calc(40px - 40px * 0.2 * 2);\r\n  top: calc(40px * 0.1 * 2);\r\n  left: calc(40px * 0.1 * 2);\r\n  animation-delay: calc(2000ms * 0.1 * 2);\r\n  z-index: 3;\r\n}\r\n\r\n.semipolar-spinner .ring:nth-child(4) {\r\n  height: calc(40px - 40px * 0.2 * 3);\r\n  width: calc(40px - 40px * 0.2 * 3);\r\n  top: calc(40px * 0.1 * 3);\r\n  left: calc(40px * 0.1 * 3);\r\n  animation-delay: calc(2000ms * 0.1 * 1);\r\n  z-index: 2;\r\n}\r\n\r\n.semipolar-spinner .ring:nth-child(5) {\r\n  height: calc(40px - 40px * 0.2 * 4);\r\n  width: calc(40px - 40px * 0.2 * 4);\r\n  top: calc(40px * 0.1 * 4);\r\n  left: calc(40px * 0.1 * 4);\r\n  animation-delay: calc(2000ms * 0.1 * 0);\r\n  z-index: 1;\r\n}\r\n\r\n@keyframes semipolar-spinner-animation {\r\n  50% {\r\n    transform: rotate(360deg) scale(0.7);\r\n  }\r\n}\r\n",
        "wrap": true
      },
      "pluginVersion": "5.7.0",
      "targets": [
        {
          "columns": [],
          "datasource": {
            "type": "yesoreyeram-infinity-datasource",
            "uid": "${DS_REDDIT_API}"
          },
          "filters": [],
          "format": "table",
          "global_query_id": "",
          "hide": false,
          "parser": "backend",
          "refId": "A",
          "root_selector": "data.children",
          "source": "url",
          "type": "json",
          "url": "/${subreddits_formatted}/hot.json?t=day",
          "url_options": {
            "data": "",
            "headers": [
              {
                "key": "User-Agent",
                "url_builder": {
                  "default": "/{{replace subreddits '\\n' '+'}}/hot.json?t=day"
                },
                "value": "Grafana/1.0"
              }
            ],
            "method": "GET"
          }
        }
      ],
      "title": "Reddit",
      "transformations": [
        {
          "id": "extractFields",
          "options": {
            "delimiter": ",",
            "format": "json",
            "jsonPaths": [
              {
                "path": "author"
              },
              {
                "path": "selftext_html"
              },
              {
                "path": "subreddit"
              },
              {
                "path": "title"
              },
              {
                "path": "score"
              },
              {
                "alias": "created_x",
                "path": "created"
              },
              {
                "path": "permalink"
              },
              {
                "path": "preview.images[0].resolutions"
              },
              {
                "path": "post_hint"
              },
              {
                "alias": "created_fm",
                "path": "created"
              },
              {
                "path": "stickied"
              },
              {
                "path": "url"
              },
              {
                "path": "num_comments"
              },
              {
                "path": "is_gallery"
              },
              {
                "path": "gallery_data"
              },
              {
                "path": "media_metadata"
              }
            ],
            "keepTime": true,
            "replace": true,
            "source": "data"
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {
              "author": 1,
              "created": 6,
              "preview.images": 0,
              "score": 5,
              "selftext_html": 2,
              "subreddit": 3,
              "title": 4,
              "url": 7
            },
            "renameByName": {}
          }
        },
        {
          "id": "convertFieldType",
          "options": {
            "conversions": [
              {
                "dateFormat": "X",
                "destinationType": "time",
                "targetField": "created_fm"
              }
            ],
            "fields": {}
          }
        },
        {
          "id": "merge",
          "options": {}
        },
        {
          "id": "sortBy",
          "options": {
            "fields": {},
            "sort": [
              {
                "desc": true,
                "field": "created_x"
              }
            ]
          }
        }
      ],
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 12,
        "w": 5,
        "x": 19,
        "y": 4
      },
      "id": 4,
      "maxDataPoints": 1,
      "options": {
        "afterRender": "// Parse the bookmarks variable and generate bookmarks\nfunction parseBookmarksVariable() {\n  // Get the bookmarks variable using Grafana's replaceVariables function\n  const bookmarksString = context.grafana.replaceVariables('${bookmarks}');\n  const bookmarksContainer = document.getElementById('bookmarks-container');\n  console.log(\"Bookmarks string:\", bookmarksString);\n\n  if (!bookmarksString || bookmarksString === '${bookmarks}' || !bookmarksContainer) {\n    bookmarksContainer.innerHTML = '<div class=\"no-bookmarks\">No bookmarks defined</div>';\n    return;\n  }\n\n  // Split the string by newlines to get individual bookmark entries\n  const bookmarkLines = bookmarksString.replace(/\\\\n/g, '\\n').split(/\\r?\\n/).filter(line => line.trim() !== '');\n  console.log(\"Number of bookmark lines:\", bookmarkLines.length);\n\n  // Generate HTML for bookmarks\n  let bookmarksHTML = '';\n\n  bookmarkLines.forEach((line, index) => {\n    if (index === 0 && line.toLowerCase().includes('label')) {\n      // Skip header row if present\n      return;\n    }\n\n    // Parse CSV format: label,url,icon,icon_color\n    const parts = line.split(',').map(part => part.trim());\n    if (parts.length < 2) return; // Need at least label and URL\n\n    const label = parts[0];\n    const url = parts[1];\n    const icon = parts.length > 2 ? parts[2] : '';\n    const iconColor = parts.length > 3 ? parts[3] : '';\n\n    // Get icon color using the helper function logic\n    const getIconColor = function (iconName, customColor) {\n      if (customColor && customColor.trim() !== '') {\n        return customColor;\n      }\n\n      const iconMap = {\n        'reddit': '#FF4500',\n        'youtube': '#FF0000',\n        'amazon': '#FF9900',\n        'nextcloud': '#0082C9',\n        'homeassistant': '#03A9F4',\n        'webmin': '#7B68EE',\n        'github': '#181717',\n        'gitlab': '#FC6D26',\n        'docker': '#2496ED',\n        'grafana': '#F46800',\n        'prometheus': '#E6522C',\n        'plex': '#E5A00D',\n        'spotify': '#1DB954',\n        'netflix': '#E50914',\n        'twitch': '#9146FF'\n      };\n\n      if (!iconName) return '#FFFFFF';\n\n      try {\n        return iconMap[iconName.toLowerCase()] || '#FFFFFF';\n      } catch (e) {\n        return '#FFFFFF';\n      }\n    };\n\n    const color = getIconColor(icon, iconColor);\n\n    // Use a simple CSS shape for default icon instead of SVG\n    bookmarksHTML += `\n      <a href=\"${url}\" target=\"_self\" class=\"bm truncate-scroll\">\n        <div class=\"bm-icon ${!icon ? 'default-icon' : ''}\" data-icon=\"${icon}\" style=\"\n              ${icon ? `-webkit-mask-image: url('https://cdn.jsdelivr.net/npm/simple-icons@v6/icons/${icon}.svg');\n              mask-image: url('https://cdn.jsdelivr.net/npm/simple-icons@v6/icons/${icon}.svg');` : ''}\n              background-color: ${color};\n            \">\n        </div>\n        <div class=\"bm-label\"><span>${label}</span></div>\n      </a>\n    `;\n  });\n\n  // Update the container AFTER the loop completes\n  bookmarksContainer.innerHTML = bookmarksHTML;\n\n  // Apply the truncation and scroll effects\n  applyTruncateScrollEffects();\n\n  // Add fallback for icons that don't load\n  setupIconFallbacks();\n}\n\n// Function to handle icon fallbacks\nfunction setupIconFallbacks() {\n  document.querySelectorAll('.bm-icon:not(.default-icon)').forEach(icon => {\n    const iconName = icon.getAttribute('data-icon');\n    if (!iconName) return;\n\n    // Check if the icon loads\n    fetch(`https://cdn.jsdelivr.net/npm/simple-icons@v6/icons/${iconName}.svg`)\n      .then(response => {\n        if (!response.ok) {\n          // If icon doesn't exist, apply default class\n          icon.classList.add('default-icon');\n          icon.style.webkitMaskImage = 'none';\n          icon.style.maskImage = 'none';\n        }\n      })\n      .catch(() => {\n        // If fetch fails, apply default class\n        icon.classList.add('default-icon');\n        icon.style.webkitMaskImage = 'none';\n        icon.style.maskImage = 'none';\n      });\n  });\n}\n\n// JavaScript for fade-out and scroll effect\nfunction applyTruncateScrollEffects() {\n  document.querySelectorAll('.truncate-scroll').forEach(function (bm) {\n    var label = bm.querySelector('.bm-label');\n    var span = label.querySelector('span');\n\n    if (!span) return; // Skip if no span is found\n\n    // Measure the full width of text\n    var tempSpan = document.createElement('span');\n    tempSpan.style.visibility = 'hidden';\n    tempSpan.style.position = 'absolute';\n    tempSpan.style.whiteSpace = 'nowrap';\n    tempSpan.style.fontSize = window.getComputedStyle(label).fontSize;\n    tempSpan.textContent = span.textContent;\n    document.body.appendChild(tempSpan);\n\n    var fullWidth = tempSpan.offsetWidth;\n    document.body.removeChild(tempSpan);\n\n    var containerWidth = label.offsetWidth;\n\n    // Only apply truncation if needed\n    if (fullWidth > containerWidth) {\n      bm.classList.add('truncate');\n\n      // Apply fade-out effect\n      label.classList.add('fade-out');\n\n      // Calculate how much to scroll (percentage of hidden text)\n      var diff = ((fullWidth - containerWidth) / fullWidth * 100).toFixed(2);\n\n      // Hover effects\n      bm.addEventListener('mouseenter', function () {\n        label.classList.add('no-fade');\n        span.style.transform = 'translateX(calc(-1 * (' + diff + '% + 5px)))';\n        bm.classList.add('hover');\n      });\n\n      bm.addEventListener('mouseleave', function () {\n        label.classList.remove('no-fade');\n        span.style.transform = 'translateX(0)';\n        bm.classList.remove('hover');\n      });\n    }\n  });\n}\n\n// Initialize bookmarks\nparseBookmarksVariable();\n",
        "content": "<div class=\"bm-container\" id=\"bookmarks-container\">\n  <!-- Bookmarks will be dynamically generated -->\n</div>",
        "contentPartials": [],
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "auto",
          "language": "html"
        },
        "editors": [
          "styles",
          "helpers",
          "afterRender"
        ],
        "externalStyles": [],
        "helpers": "context.handlebars.registerHelper('getIconColor', function (iconName, customColor) {\r\n  // If a custom color is provided and not empty, use it\r\n  if (customColor && customColor.trim() !== '') {\r\n    return customColor;\r\n  }\r\n\r\n  // Otherwise fall back to the default brand colors\r\n  const iconMap = {\r\n    'reddit': '#FF4500',\r\n    'youtube': '#FF0000',\r\n    'amazon': '#FF9900',\r\n    'nextcloud': '#0082C9',\r\n    'homeassistant': '#03A9F4',\r\n    'webmin': '#7B68EE',\r\n    'github': '#181717',\r\n    'gitlab': '#FC6D26',\r\n    'docker': '#2496ED',\r\n    'grafana': '#F46800',\r\n    'prometheus': '#E6522C',\r\n    'plex': '#E5A00D',\r\n    'spotify': '#1DB954',\r\n    'netflix': '#E50914',\r\n    'twitch': '#9146FF'\r\n  };\r\n\r\n  return iconMap[iconName.toLowerCase()] || '#FFFFFF';\r\n});\r\n",
        "renderMode": "allRows",
        "styles": ".bm-container {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\r\n  padding: 5px;\r\n}\r\n\r\n.bm {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  border-radius: 10px;\r\n  padding: 10px 0;\r\n  transition: all 0.2s ease-out;\r\n}\r\n\r\n.bm:hover {\r\n  box-shadow: 0 0 30px rgba(0, 0, 0, 0.25);\r\n  background: rgba(50,50,60,0.3);\r\n}\r\n\r\n.bm:hover .bm-icon {\r\n  transform: scale(1.1);\r\n  opacity: 1;\r\n}\r\n\r\n.bm-icon {\r\n  width: 35px;\r\n  height: 35px;\r\n  -webkit-mask-size: contain;\r\n  mask-size: contain;\r\n  -webkit-mask-repeat: no-repeat;\r\n  mask-repeat: no-repeat;\r\n  -webkit-mask-position: center;\r\n  mask-position: center;\r\n  transition: all 0.3s ease;\r\n  opacity: 0.7;\r\n  will-change: transform;\r\n}\r\n.default-icon {\r\n  -webkit-mask-image: none !important;\r\n  mask-image: none !important;\r\n  border-radius: 50%;\r\n  border: 2px solid rgba(255, 255, 255, 0.5);\r\n}\r\n\r\n.default-icon::before {\r\n  content: \"\";\r\n  display: block;\r\n  width: 60%;\r\n  height: 60%;\r\n  margin: 20%;\r\n  border-radius: 50%;\r\n  background-color: rgba(255, 255, 255, 0.5);\r\n}\r\n\r\n.bm-label {\r\n  font-size: 14px;\r\n  color: #F2F4F5;\r\n  width: 100px;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  position: relative;\r\n}\r\n\r\n.bm-label span {\r\n  display: inline-block;\r\n  transition: transform 2s;\r\n  white-space: nowrap;\r\n}\r\n\r\n.bm-label.fade-out {\r\n  -webkit-mask-image: linear-gradient(to right, black 85%, transparent 110%);\r\n  mask-image: linear-gradient(to right, black 85%, transparent 110%);\r\n  -webkit-mask-size: 200% 100%;\r\n  mask-size: 200% 100%;\r\n  -webkit-mask-position: 100% 0%;\r\n  mask-position: 100% 0%;\r\n  transition: -webkit-mask-position 0.5s ease, mask-position 0.5s ease;\r\n}\r\n\r\n.bm-label.no-fade {\r\n  -webkit-mask-position: 0% 0%;\r\n  mask-position: 0% 0%;\r\n}\r\n\r\n.no-bookmarks {\r\n  grid-column: 1 / -1;\r\n  text-align: center;\r\n  padding: 20px;\r\n  color: #aaa;\r\n}\r\n",
        "wrap": true
      },
      "pluginVersion": "5.7.0",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "queryType": "randomWalk",
          "refId": "Dummy"
        }
      ],
      "title": "Bookmarks",
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 5,
        "x": 0,
        "y": 6
      },
      "id": 5,
      "interval": "1m",
      "maxDataPoints": 1,
      "options": {
        "afterRender": "const twitchContainer = document.querySelector('.twitch-container');\r\nif (!twitchContainer.classList.contains('loading')) {\r\n  twitchContainer.classList.add('loading');\r\n}\r\nif (twitchContainer.classList.contains('loaded')) {\r\n  twitchContainer.classList.remove('loaded');\r\n}\r\n// Load data for all channels\r\nasync function loadAllChannels() {\r\n  const twitchContainer = document.querySelector('.twitch-container');\r\n\r\n  // Record the start time for minimum loading duration\r\n  const loadStartTime = Date.now();\r\n\r\n  // Set up loading timeout at the beginning\r\n  const loadingTimeout = setTimeout(() => {\r\n    if (twitchContainer && twitchContainer.classList.contains('loading')) {\r\n      console.warn('Loading timeout - forcing complete state');\r\n      twitchContainer.classList.remove('loading');\r\n    }\r\n  }, 15000); // 15 second timeout\r\n\r\n  try {\r\n    // Get the twitch_channels variable using Grafana's replaceVariables function\r\n    const channelsString = context.grafana.replaceVariables(\"${twitch_channels}\") || \"\";\r\n\r\n    // Split by newlines instead of plus signs\r\n    const channels = channelsString.split(/\\r?\\n/).filter(channel => channel.trim() !== \"\");\r\n\r\n    // Generate HTML for each channel\r\n    const twitchContent = document.querySelector('.twitch-content');\r\n    if (twitchContent) {\r\n      twitchContent.innerHTML = channels.map(channel =>\r\n        `<div class=\"twitch-card\" id=\"twitch-${channel}\" data-channel=\"${channel}\">\r\n           <div class=\"loading-container\">\r\n             <div class=\"semipolar-spinner\">\r\n               <div class=\"ring\"></div>\r\n               <div class=\"ring\"></div>\r\n               <div class=\"ring\"></div>\r\n               <div class=\"ring\"></div>\r\n               <div class=\"ring\"></div>\r\n             </div>\r\n             <div class=\"loading-text\">Loading Twitch channels...</div>\r\n           </div>\r\n         </div>`\r\n      ).join('');\r\n    }\r\n\r\n    // Now get all twitch cards we just created\r\n    const twitchCards = document.querySelectorAll('.twitch-card');\r\n    const channelDataArray = [];\r\n\r\n    // If no channels, show a message\r\n    if (twitchCards.length === 0) {\r\n      console.warn(\"No Twitch channels specified in the twitch_channels variable\");\r\n      if (twitchContainer) {\r\n        twitchContainer.classList.add('loaded');\r\n        const content = document.querySelector('.twitch-content');\r\n        if (content) {\r\n          content.innerHTML = '<div class=\"no-channels\">No Twitch channels specified</div>';\r\n        }\r\n\r\n        // Remove loading class after a delay to allow transitions\r\n        setTimeout(() => {\r\n          twitchContainer.classList.remove('loading');\r\n        }, 100);\r\n      }\r\n      clearTimeout(loadingTimeout);\r\n      return;\r\n    }\r\n\r\n    // Helper function to fetch Twitch data\r\n    async function fetchTwitchData(channelName) {\r\n      try {\r\n        // Get avatar\r\n        const avatarResponse = await fetch(`https://decapi.me/twitch/avatar/${channelName}`);\r\n        const avatarUrl = await avatarResponse.text();\r\n\r\n        // Get stream status\r\n        const uptimeResponse = await fetch(`https://decapi.me/twitch/uptime/${channelName}`);\r\n        const uptime = await uptimeResponse.text();\r\n        const isLive = !uptime.includes(\"offline\");\r\n\r\n        // Default values\r\n        let game = '';\r\n        let viewerCount = 0;\r\n        let thumbnail = '';\r\n        let title = '';\r\n\r\n        // Get additional info if live\r\n        if (isLive) {\r\n          // Use Promise.all to fetch all live data in parallel\r\n          const responses = await Promise.all([\r\n            fetch(`https://decapi.me/twitch/game/${channelName}`),\r\n            fetch(`https://decapi.me/twitch/viewercount/${channelName}`),\r\n            fetch(`https://decapi.me/twitch/title/${channelName}`)\r\n          ]);\r\n\r\n          // Process all responses\r\n          game = await responses[0].text();\r\n\r\n          const viewerText = await responses[1].text();\r\n          const viewerMatch = viewerText.match(/(\\d+)/);\r\n          viewerCount = viewerMatch ? parseInt(viewerMatch[0]) : 0;\r\n\r\n          title = await responses[2].text();\r\n\r\n          // Get thumbnail with cache-busting\r\n          thumbnail = `https://static-cdn.jtvnw.net/previews-ttv/live_user_${channelName.toLowerCase()}-320x180.jpg?${Date.now()}`;\r\n        }\r\n\r\n        return {\r\n          name: channelName,\r\n          avatar: avatarUrl,\r\n          isLive: isLive,\r\n          game: game,\r\n          viewers: viewerCount,\r\n          thumbnail: thumbnail,\r\n          title: title\r\n        };\r\n      } catch (error) {\r\n        console.error(`Error fetching data for ${channelName}:`, error);\r\n        return {\r\n          name: channelName,\r\n          avatar: '',\r\n          isLive: false,\r\n          game: '',\r\n          viewers: 0,\r\n          thumbnail: '',\r\n          title: '',\r\n          error: true\r\n        };\r\n      }\r\n    }\r\n\r\n    function updateTwitchCard(cardElement, data) {\r\n      // Format viewer count with thousand separators\r\n      const formattedViewers = data.viewers.toLocaleString();\r\n\r\n      // Update the card with new content\r\n      cardElement.innerHTML = `\r\n        <div class=\"twitch-main-info\">\r\n          <div class=\"twitch-avatar-container ${data.isLive ? 'avatar-live' : ''}\">\r\n          <a href=\"https://twitch.tv/${data.name}\" target=\"_blank\" class=\"twitch-link\">\r\n            <img src=\"${data.avatar}\" class=\"twitch-avatar\" alt=\"${data.name}\">\r\n            ${data.isLive && data.thumbnail ?\r\n          `<div class=\"twitch-thumbnail-popup\">\r\n                 <img src=\"${data.thumbnail}\" alt=\"Stream preview\" loading=\"lazy\">\r\n                 <div class=\"twitch-stream-title\">${data.title}</div>\r\n               </div>` : ''\r\n        }\r\n          </a>\r\n          </div>\r\n          <div class=\"twitch-info\">\r\n            <div class=\"twitch-name\">\r\n              <a href=\"https://twitch.tv/${data.name}\" target=\"_blank\" class=\"twitch-link\">${data.name}</a>\r\n            </div>\r\n            <div class=\"twitch-status-row\">\r\n              ${data.isLive ?\r\n          `<div class=\"twitch-status status-live\">LIVE</div>\r\n                 <div class=\"viewer-count\">${formattedViewers} viewers</div>` :\r\n          `<div class=\"twitch-status status-offline\">Offline</div>`\r\n        }\r\n            </div>\r\n            ${data.isLive && data.game ? `<div class=\"twitch-game\">Playing: <div class=\"twitch-game-name\">${data.game}</div></div>` : ''}\r\n          </div>\r\n        </div>\r\n      `;\r\n    }\r\n\r\n    // Process each card\r\n    const promises = [];\r\n\r\n    twitchCards.forEach(card => {\r\n      // Get channel name from data attribute or fallback to ID parsing\r\n      let channelName = card.getAttribute('data-channel');\r\n\r\n      // If no data-channel attribute, try to extract from ID\r\n      if (!channelName && card.id && card.id.startsWith('twitch-')) {\r\n        channelName = card.id.replace('twitch-', '');\r\n      }\r\n\r\n      if (channelName) {\r\n        // Create a promise for each fetch operation\r\n        const promise = fetchTwitchData(channelName)\r\n          .then(data => {\r\n            // Store the data and the card element for later sorting\r\n            channelDataArray.push({\r\n              data: data,\r\n              element: card\r\n            });\r\n            // Update the card immediately so it shows content while waiting for others\r\n            updateTwitchCard(card, data);\r\n          })\r\n          .catch(error => {\r\n            console.error(`Error processing ${channelName}:`, error);\r\n            card.innerHTML = `\r\n              <div class=\"loading-container\">\r\n                <div class=\"twitch-error\">Failed to load data for ${channelName}</div>\r\n              </div>`;\r\n          });\r\n\r\n        promises.push(promise);\r\n\r\n      } else {\r\n        console.error(\"Could not determine channel name for card:\", card);\r\n        card.innerHTML = `\r\n          <div class=\"loading-container\">\r\n            <div class=\"twitch-error\">Invalid channel configuration</div>\r\n          </div>`;\r\n      }\r\n    });\r\n\r\n    // Wait for all channels to load\r\n    await Promise.all(promises).then(() => {\r\n      // Sort channels - live channels first\r\n      channelDataArray.sort((a, b) => {\r\n        // Primary sort: Live status (live channels first)\r\n        if (a.data.isLive !== b.data.isLive) {\r\n          return b.data.isLive - a.data.isLive;\r\n        }\r\n        // Secondary sort: For live channels, sort by viewer count (highest first)\r\n        if (a.data.isLive && b.data.isLive) {\r\n          return b.data.viewers - a.data.viewers;\r\n        }\r\n        // For offline channels, sort alphabetically by name\r\n        return a.data.name.localeCompare(b.data.name);\r\n      });\r\n\r\n      // Create a document fragment to minimize DOM operations\r\n      const fragment = document.createDocumentFragment();\r\n      const container = twitchCards.length > 0 ? twitchCards[0].parentNode : null;\r\n\r\n      // Update each card with its data and move it in the DOM\r\n      channelDataArray.forEach(item => {\r\n        fragment.appendChild(item.element);\r\n      });\r\n\r\n      // Replace all cards in the container with our sorted fragment\r\n      if (container) {\r\n        container.innerHTML = '';\r\n        container.appendChild(fragment);\r\n      }\r\n\r\n      // Set up thumbnail popups after DOM is updated\r\n      setTimeout(setupThumbnailPopups, 100);\r\n    });\r\n\r\n    // Record load duration and ensure minimum loading time\r\n    const loadDuration = Date.now() - loadStartTime;\r\n    const minLoadTime = 500; // Minimum loading time in milliseconds\r\n\r\n    if (loadDuration < minLoadTime) {\r\n      setTimeout(() => {\r\n        if (twitchContainer) {\r\n          twitchContainer.classList.add('loaded');\r\n          // Remove loading class AFTER adding loaded class and a small delay\r\n          setTimeout(() => {\r\n            twitchContainer.classList.remove('loading');\r\n          }, 100);\r\n        }\r\n      }, minLoadTime - loadDuration);\r\n    } else {\r\n      // Loading took longer than minimum time\r\n      if (twitchContainer) {\r\n        twitchContainer.classList.add('loaded');\r\n        // Remove loading class AFTER adding loaded class and a small delay\r\n        setTimeout(() => {\r\n          twitchContainer.classList.remove('loading');\r\n        }, 100);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error in loadAllChannels:\", error);\r\n    if (twitchContainer) {\r\n      twitchContainer.classList.add('loaded');\r\n      // Remove loading class after a delay to allow transitions\r\n      setTimeout(() => {\r\n        twitchContainer.classList.remove('loading');\r\n      }, 100);\r\n    }\r\n  } finally {\r\n    // Always clear timeout\r\n    clearTimeout(loadingTimeout);\r\n  }\r\n}\r\n\r\nfunction setupThumbnailPopups() {\r\n  // Core popover variables\r\n  const defaultShowDelayMs = 100;\r\n  const defaultHideDelayMs = 100;\r\n  let activeTarget = null;\r\n  let pendingTarget = null;\r\n  let togglePopoverTimeout = null;\r\n\r\n  // Create or update the popup container\r\n  let containerElement = document.getElementById('global-twitch-popup');\r\n  if (!containerElement) {\r\n    containerElement = document.createElement(\"div\");\r\n    containerElement.id = 'global-twitch-popup';\r\n\r\n    // Apply styles directly to maintain compatibility with Grafana\r\n    const popupStyles = {\r\n      'position': 'fixed',\r\n      'z-index': '10000',\r\n      'width': '320px',\r\n      'max-width': '90vw',\r\n      'display': 'none',\r\n      'flex-direction': 'column',\r\n      'border-radius': '10px',\r\n      'box-shadow': '0 0 20px rgba(0, 0, 0, 0.7)',\r\n      'overflow': 'hidden',\r\n      'pointer-events': 'auto',\r\n      'opacity': '0',\r\n      'transform': 'translateY(10px) scale(0.98)',\r\n      'transition': 'opacity 0.2s ease-out, transform 0.2s ease-out'\r\n    };\r\n\r\n    Object.assign(containerElement.style, popupStyles);\r\n    document.body.appendChild(containerElement);\r\n  }\r\n\r\n  // Add core event listeners to container\r\n  containerElement.addEventListener(\"mouseenter\", clearTogglePopoverTimeout);\r\n  containerElement.addEventListener(\"mouseleave\", handleMouseLeave);\r\n\r\n  // Create a resize observer for responsive repositioning\r\n  const queueRepositionContainer = () => requestAnimationFrame(repositionContainer);\r\n  const observer = new ResizeObserver(queueRepositionContainer);\r\n\r\n  // Handle mouseenter on twitch avatar\r\n  function handleMouseEnter(event) {\r\n    clearTogglePopoverTimeout();\r\n    const target = event.currentTarget;\r\n    pendingTarget = target;\r\n\r\n    // Find the thumbnail content\r\n    const thumbnail = target.querySelector('.twitch-thumbnail-popup');\r\n    if (!thumbnail) return;\r\n\r\n    // If we already have an active target but it's different\r\n    if (activeTarget !== null) {\r\n      if (activeTarget !== target) {\r\n        hidePopover();\r\n        requestAnimationFrame(() => requestAnimationFrame(showPopover));\r\n      }\r\n      return;\r\n    }\r\n\r\n    togglePopoverTimeout = setTimeout(showPopover, defaultShowDelayMs);\r\n  }\r\n\r\n  // Handle mouseleave\r\n  function handleMouseLeave() {\r\n    clearTogglePopoverTimeout();\r\n    togglePopoverTimeout = setTimeout(hidePopover, defaultHideDelayMs);\r\n  }\r\n\r\n  // Helper to clear timeout\r\n  function clearTogglePopoverTimeout() {\r\n    clearTimeout(togglePopoverTimeout);\r\n  }\r\n\r\n  // Display the popover with smooth transition\r\n  function showPopover() {\r\n    if (pendingTarget === null) return;\r\n\r\n    activeTarget = pendingTarget;\r\n    pendingTarget = null;\r\n\r\n    // Get thumbnail content\r\n    const thumbnail = activeTarget.querySelector('.twitch-thumbnail-popup');\r\n    if (!thumbnail) return;\r\n\r\n    // Copy content to our global popup\r\n    containerElement.innerHTML = thumbnail.innerHTML;\r\n\r\n    // Style the thumbnail image\r\n    const popupImage = containerElement.querySelector('img');\r\n    if (popupImage) {\r\n      Object.assign(popupImage.style, {\r\n        'width': '100%',\r\n        'aspect-ratio': '16 / 9',\r\n        'border-radius': '8px 8px 0 0',\r\n        'box-shadow': '0 5px 15px rgba(0, 0, 0, 0.5)'\r\n      });\r\n    }\r\n\r\n    // Style the title element\r\n    const titleElement = containerElement.querySelector('.twitch-stream-title');\r\n    if (titleElement) {\r\n      Object.assign(titleElement.style, {\r\n        'padding': '10px',\r\n        'background-color': 'rgba(0, 0, 0, 0.8)',\r\n        'color': 'white',\r\n        'font-size': '14px',\r\n        'word-wrap': 'break-word'\r\n      });\r\n    }\r\n\r\n    // Position container before showing (while still invisible)\r\n    containerElement.style.setProperty('display', 'flex', 'important');\r\n    repositionContainer();\r\n\r\n    // Trigger transition by setting properties in next frame\r\n    requestAnimationFrame(() => {\r\n      containerElement.style.setProperty('opacity', '1', 'important');\r\n      containerElement.style.setProperty('transform', 'translateY(0) scale(1)', 'important');\r\n    });\r\n\r\n    observer.observe(containerElement);\r\n\r\n    // Add escape key handler\r\n    document.addEventListener(\"keydown\", handleEscapeKey);\r\n  }\r\n\r\n  // Calculate and apply popover position\r\n  function repositionContainer() {\r\n    if (!activeTarget) return;\r\n\r\n    const rect = activeTarget.getBoundingClientRect();\r\n    const containerRect = containerElement.getBoundingClientRect();\r\n    const offset = 10;\r\n    const popupWidth = 320;\r\n\r\n    let xPos, yPos;\r\n\r\n    // Horizontal positioning - prefer right side if space available\r\n    if (rect.right + offset + popupWidth < window.innerWidth) {\r\n      xPos = rect.right + offset;\r\n    } else {\r\n      xPos = Math.max(0, rect.left - offset - popupWidth);\r\n    }\r\n\r\n    // Vertical positioning - align with avatar center\r\n    yPos = rect.top + (rect.height / 2) - (containerRect.height / 2);\r\n    yPos = Math.max(10, Math.min(window.innerHeight - containerRect.height - 10, yPos));\r\n\r\n    // Apply position with important to override Grafana styles\r\n    containerElement.style.setProperty('left', xPos + 'px', 'important');\r\n    containerElement.style.setProperty('top', yPos + 'px', 'important');\r\n    containerElement.style.setProperty('visibility', 'visible', 'important');\r\n  }\r\n\r\n  // Hide the popover with smooth transition\r\n  function hidePopover() {\r\n    if (activeTarget === null) return;\r\n\r\n    // Start fade-out transition\r\n    containerElement.style.setProperty('opacity', '0', 'important');\r\n    containerElement.style.setProperty('transform', 'translateY(10px) scale(0.98)', 'important');\r\n\r\n    // Wait for the transition to complete before removing from DOM\r\n    containerElement.style.setProperty('display', 'none', 'important');\r\n    observer.unobserve(containerElement);\r\n    activeTarget = null;\r\n\r\n    document.removeEventListener(\"keydown\", handleEscapeKey);\r\n  }\r\n\r\n  // Handle escape key to dismiss popover\r\n  function handleEscapeKey(event) {\r\n    if (event.key === \"Escape\") {\r\n      hidePopover();\r\n    }\r\n  }\r\n\r\n  // Get all avatar containers that are live\r\n  const avatarContainers = document.querySelectorAll('.twitch-avatar-container.avatar-live');\r\n\r\n  // Add mouse events to each avatar\r\n  avatarContainers.forEach(container => {\r\n    // Clean existing listeners by cloning\r\n    const newContainer = container.cloneNode(true);\r\n    if (container.parentNode) {\r\n      container.parentNode.replaceChild(newContainer, container);\r\n    }\r\n\r\n    // Add event listeners\r\n    newContainer.addEventListener('mouseenter', handleMouseEnter);\r\n    newContainer.addEventListener('mouseleave', handleMouseLeave);\r\n  });\r\n}\r\n\r\n\r\n\r\n// Then call the function to load all channels\r\nloadAllChannels();\r\n",
        "content": "<div class=\"twitch-container loading\">\n  <div class=\"loading-container\">\n    <div class=\"semipolar-spinner\">\n      <div class=\"ring\"></div>\n      <div class=\"ring\"></div>\n      <div class=\"ring\"></div>\n      <div class=\"ring\"></div>\n      <div class=\"ring\"></div>\n    </div>\n    <div class=\"loading-text\">Loading Twitch Channels...</div>\n  </div>\n  <div class=\"twitch-content\">\n  </div>\n</div>",
        "contentPartials": [],
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "auto",
          "language": "html"
        },
        "editors": [
          "styles",
          "afterRender",
          "helpers"
        ],
        "externalStyles": [],
        "helpers": "",
        "renderMode": "allRows",
        "styles": ".twitch-container .twitch-content {\r\n  display: grid!important;\r\n  gap: 10px;\r\n  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));\r\n}\r\n\r\n.twitch-card {\r\n  display: flex;\r\n  padding: 6px 8px;\r\n  overflow: hidden;\r\n}\r\n\r\n.twitch-link {\r\n  text-decoration: none;\r\n  color: inherit;\r\n  display: block;\r\n  width: 100%;\r\n}\r\n.twitch-container.loading .twitch-content {\r\n  opacity: 0;\r\n}\r\n\r\n.twitch-container:not(.loading) .twitch-content {\r\n  opacity: 1;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n  grid-gap: 10px;\r\n}\r\n\r\n\r\n.twitch-container:not(.loading) .loading-container {\r\n  opacity: 0;\r\n  pointer-events: none;\r\n}\r\n\r\n.twitch-link:hover {\r\n  text-decoration: none;\r\n}\r\n\r\n.twitch-name .twitch-link {\r\n  color: rgb(242, 244, 245);\r\n}\r\n\r\n.twitch-main-info {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.twitch-avatar-container {\r\n  width: 50px;\r\n  height: 50px;\r\n  border-radius: 50%;\r\n  margin-right: 10px;\r\n  overflow: visible;\r\n  border: 2px solid transparent;\r\n  flex-shrink: 0;\r\n  transition: all 0.2s ease-in-out;\r\n  position: relative;\r\n  will-change: transform;\r\n}\r\n\r\n.avatar-live {\r\n  border-color: rgb(233, 25, 22);\r\n  animation: pulse 2s infinite;\r\n}\r\n\r\n@keyframes pulse {\r\n  0% {\r\n    box-shadow: 0 0 0 0 rgba(233, 25, 22, 0.7);\r\n  }\r\n  70% {\r\n    box-shadow: 0 0 0 10px rgba(233, 25, 22, 0);\r\n  }\r\n  100% {\r\n    box-shadow: 0 0 0 0 rgba(233, 25, 22, 0);\r\n  }\r\n}\r\n\r\n.twitch-avatar {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: contain;\r\n  border-radius: 50%;\r\n  opacity: 0.7;\r\n  will-change: transform;\r\n}\r\n\r\n.twitch-card:hover .twitch-avatar-container {\r\n  opacity: 1;\r\n  transform: scale(1.05);\r\n  will-change: trasform;\r\n}\r\n.twitch-thumbnail-popup {\r\n  position: fixed;\r\n  z-index: 9999;\r\n  width: 320px;\r\n  max-width: 90vw;\r\n  opacity: 0;\r\n  visibility: hidden;\r\n  transition: opacity 0.3s ease, visibility 0.3s;\r\n  pointer-events: none;\r\n  display: flex;\r\n  flex-direction: column;\r\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n}\r\n\r\n.twitch-thumbnail-popup img {\r\n  width: 100%;\r\n  height: auto;\r\n  object-fit: cover;\r\n  border-radius: 10px 10px 0 0;\r\n}\r\n\r\n.twitch-stream-title {\r\n  padding: 5px 15px;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  color: white;\r\n  font-size: 0.75rem;\r\n  word-wrap: break-word;\r\n}\r\n\r\n.twitch-info {\r\n  flex: 1;\r\n}\r\n\r\n.twitch-name {\r\n  font-size: 0.9rem;\r\n  font-weight: 500;\r\n  color: rgb(242, 244, 245);\r\n  position: relative;\r\n}\r\n\r\n.twitch-status-row {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.twitch-status {\r\n  font-size: 0.7rem;\r\n  padding: 0 8px;\r\n  border-radius: 4px;\r\n  display: inline-block;\r\n  font-weight: 500;\r\n}\r\n\r\n.status-live {\r\n  background-color: rgba(192, 3, 0, 0.831);\r\n  color: white;\r\n}\r\n\r\n.status-offline {\r\n  background-color: rgba(110, 110, 110, 0.5);\r\n  color: rgb(208, 208, 208);\r\n  font-weight: 400;\r\n}\r\n\r\n.viewer-count {\r\n  margin-left: 8px;\r\n  font-size: 0.8rem;\r\n  color: rgb(183, 202, 212);\r\n}\r\n\r\n.twitch-game {\r\n  font-size: 0.8rem;\r\n  color: rgb(183, 202, 212);\r\n}\r\n\r\n.twitch-game-name {\r\n  display: inline;\r\n  font-size: 0.8rem;\r\n  font-weight: 500;\r\n}\r\n\r\n/* Loading Animation Styles */\r\n.loading-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 200px;\r\n  width: 100%;\r\n  opacity: 1;\r\n  transition: opacity 0.5s ease-in-out;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 10;\r\n  overflow: hidden;\r\n}\r\n\r\n.loading-text {\r\n  margin-top: 15px;\r\n  color: #b0b0b0;\r\n  font-size: 14px;\r\n}\r\n\r\n.twitch-container {\r\n  position: relative;\r\n}\r\n\r\n.twitch-container .twitch-content {\r\n  display: block;\r\n  opacity: 0;\r\n  transition: opacity 0.5s ease-in;\r\n}\r\n\r\n.twitch-container.loaded .twitch-content {\r\n  opacity: 1;\r\n  display: flex;\r\n}\r\n\r\n.twitch-container.loaded .loading-container {\r\n  opacity: 0;\r\n  pointer-events: none;\r\n}\r\n\r\n/* Loading Spinner */\r\n.semipolar-spinner, .semipolar-spinner * {\r\n  box-sizing: border-box;\r\n}\r\n\r\n.semipolar-spinner {\r\n  height: 40px;\r\n  width: 40px;\r\n  position: relative;\r\n  transition: transform 0.5s ease-out;\r\n}\r\n\r\n.semipolar-spinner .ring {\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  border: calc(40px * 0.05) solid transparent;\r\n  border-top-color: rgba(0, 162, 255, 0.5);\r\n  border-left-color: rgba(0, 162, 255, 0.5);\r\n  animation: semipolar-spinner-animation 2s infinite;\r\n}\r\n\r\n.semipolar-spinner .ring:nth-child(1) {\r\n  height: calc(40px - 40px * 0.2 * 0);\r\n  width: calc(40px - 40px * 0.2 * 0);\r\n  top: calc(40px * 0.1 * 0);\r\n  left: calc(40px * 0.1 * 0);\r\n  animation-delay: calc(2000ms * 0.1 * 4);\r\n  z-index: 5;\r\n}\r\n\r\n.semipolar-spinner .ring:nth-child(2) {\r\n  height: calc(40px - 40px * 0.2 * 1);\r\n  width: calc(40px - 40px * 0.2 * 1);\r\n  top: calc(40px * 0.1 * 1);\r\n  left: calc(40px * 0.1 * 1);\r\n  animation-delay: calc(2000ms * 0.1 * 3);\r\n  z-index: 4;\r\n}\r\n\r\n.semipolar-spinner .ring:nth-child(3) {\r\n  height: calc(40px - 40px * 0.2 * 2);\r\n  width: calc(40px - 40px * 0.2 * 2);\r\n  top: calc(40px * 0.1 * 2);\r\n  left: calc(40px * 0.1 * 2);\r\n  animation-delay: calc(2000ms * 0.1 * 2);\r\n  z-index: 3;\r\n}\r\n\r\n.semipolar-spinner .ring:nth-child(4) {\r\n  height: calc(40px - 40px * 0.2 * 3);\r\n  width: calc(40px - 40px * 0.2 * 3);\r\n  top: calc(40px * 0.1 * 3);\r\n  left: calc(40px * 0.1 * 3);\r\n  animation-delay: calc(2000ms * 0.1 * 1);\r\n  z-index: 2;\r\n}\r\n\r\n.semipolar-spinner .ring:nth-child(5) {\r\n  height: calc(40px - 40px * 0.2 * 4);\r\n  width: calc(40px - 40px * 0.2 * 4);\r\n  top: calc(40px * 0.1 * 4);\r\n  left: calc(40px * 0.1 * 4);\r\n  animation-delay: calc(2000ms * 0.1 * 0);\r\n  z-index: 1;\r\n}\r\n\r\n@keyframes semipolar-spinner-animation {\r\n  50% {\r\n    transform: rotate(360deg) scale(0.7);\r\n  }\r\n}\r\n\r\n",
        "wrap": true
      },
      "pluginVersion": "5.7.0",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "queryType": "randomWalk",
          "refId": "A"
        }
      ],
      "title": "Twitch",
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 11,
        "w": 5,
        "x": 0,
        "y": 16
      },
      "hideTimeOverride": true,
      "id": 9,
      "interval": "1m",
      "maxDataPoints": 1,
      "options": {
        "afterRender": "// Initial image error handling\r\ndocument.querySelectorAll('.game-thumbnail img').forEach(img => {\r\n  img.onerror = function () {\r\n    this.src = 'https://static-cdn.jtvnw.net/ttv-static/404_boxart-144x192.jpg';\r\n  }\r\n});\r\n\r\n// Now fetch real data and update the DOM\r\n(async function loadTopGames() {\r\n  try {\r\n    // Get blacklist from dashboard variable\r\n    let blacklist = [];\r\n    try {\r\n      // Access the blacklist variable using replaceVariables\r\n      const blacklistString = context.grafana.replaceVariables(\"${toptwitch_blacklist}\") || \"\";\r\n\r\n      // Split by newlines or commas depending on your variable format\r\n      blacklist = blacklistString.split(/[,\\r\\n]/).map(item => item.trim()).filter(item => item !== \"\");\r\n\r\n      console.log(\"Blacklist from variable:\", blacklist);\r\n    } catch (e) {\r\n      console.error(\"Error accessing blacklist variable:\", e);\r\n    }\r\n\r\n    const response = await fetch(\"https://gql.twitch.tv/gql\", {\r\n      method: 'POST',\r\n      headers: {\r\n        'Client-ID': 'kimne78kx3ncx6brgo4mv6wki5h1ko',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify([{\r\n        \"operationName\": \"BrowsePage_AllDirectories\",\r\n        \"variables\": {\r\n          \"limit\": 10, // Increased limit to account for filtered items\r\n          \"options\": { \"sort\": \"VIEWER_COUNT\", \"tags\": [] }\r\n        },\r\n        \"extensions\": {\r\n          \"persistedQuery\": {\r\n            \"version\": 1,\r\n            \"sha256Hash\": \"2f67f71ba89f3c0ed26a141ec00da1defecb2303595f5cda4298169549783d9e\"\r\n          }\r\n        }\r\n      }])\r\n    });\r\n\r\n    const data = await response.json();\r\n    console.log(\"Twitch API response:\", data);\r\n\r\n    if (!data[0]?.data?.directoriesWithTags?.edges) {\r\n      console.error(\"Unexpected API response format\");\r\n      return;\r\n    }\r\n\r\n    // Filter out blacklisted categories (case-insensitive)\r\n    const filteredGames = data[0].data.directoriesWithTags.edges\r\n      .filter(edge => {\r\n        const gameName = edge.node.name;\r\n        return !blacklist.some(item =>\r\n          gameName.toLowerCase() === item.toLowerCase()\r\n        );\r\n      })\r\n      .slice(0, 5); // Limit to 5 items after filtering\r\n\r\n    // Process and update the DOM\r\n    const gamesContent = document.querySelector('.top-games-container .games-content');\r\n    gamesContent.innerHTML = '';\r\n\r\n\r\n    filteredGames.forEach(edge => {\r\n      const game = edge.node;\r\n      const tags = game.tags?.map(tag => tag.tagName) || [];\r\n      const viewerCount = game.viewersCount || 0;\r\n\r\n      // Format viewers\r\n      let viewersText = '0';\r\n      if (viewerCount >= 1000000) {\r\n        viewersText = (viewerCount / 1000000).toFixed(1) + 'm';\r\n      } else if (viewerCount >= 1000) {\r\n        viewersText = Math.floor(viewerCount / 1000) + 'k';\r\n      } else {\r\n        viewersText = viewerCount.toString();\r\n      }\r\n\r\n      // Create game card\r\n      const gameCard = document.createElement('div');\r\n      gameCard.className = 'game-card';\r\n\r\n      // Use the boxArtURL from the API response with fixed dimensions\r\n      const boxArtURL = game.avatarURL ||\r\n        `https://static-cdn.jtvnw.net/ttv-static/404_boxart-144x192.jpg`;\r\n\r\n      // Create proper Twitch game URL\r\n      const gameUrl = `https://www.twitch.tv/directory/game/${encodeURIComponent(game.name)}`;\r\n\r\n      // Set the HTML content with links\r\n      gameCard.innerHTML = `\r\n        <div class=\"game-thumbnail\">\r\n          <a href=\"${gameUrl}\" target=\"_blank\" class=\"game-link\">\r\n            <img src=\"${boxArtURL}\" \r\n                 alt=\"${game.name}\"\r\n                 onerror=\"this.src='https://static-cdn.jtvnw.net/ttv-static/404_boxart-144x192.jpg'\">\r\n          </a>\r\n        </div>\r\n        <div class=\"game-info\">\r\n          <div class=\"game-name\">\r\n            <a href=\"${gameUrl}\" target=\"_blank\" class=\"game-link\">${game.name}</a>\r\n          </div>\r\n          <div class=\"game-viewers\">${viewersText} viewers</div>\r\n          <div class=\"game-categories\">\r\n            ${tags[0] || \"Game\"}${tags.length > 1 ? ' • ' + tags[1] : ''}\r\n          </div>\r\n        </div>\r\n      `;\r\n\r\n      gamesContent.appendChild(gameCard);\r\n      document.querySelector('.top-games-container').classList.add('loaded');\r\n\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error loading top games:\", error);\r\n  }\r\n})();\r\n",
        "content": "<div class=\"top-games-container\">\n  <div class=\"loading-container\">\n    <div class=\"semipolar-spinner\">\n      <div class=\"ring\"></div>\n      <div class=\"ring\"></div>\n      <div class=\"ring\"></div>\n      <div class=\"ring\"></div>\n      <div class=\"ring\"></div>\n    </div>\n    <div class=\"loading-text\">Loading top games...</div>\n  </div>\n\n  <div class=\"games-content\">\n    {{#each data}}\n    <div class=\"game-card\">\n      <div class=\"game-thumbnail\">\n        <img src=\"https://static-cdn.jtvnw.net/ttv-boxart/{{slug}}-144x192.jpg\"\n              alt=\"{{name}}\"\n              onerror=\"this.src='https://static-cdn.jtvnw.net/ttv-static/404_boxart-144x192.jpg'\">\n      </div>\n      <div class=\"game-info\">\n        <div class=\"game-name\">{{name}}</div>\n        <div class=\"game-viewers\">{{formatViewers viewers}} viewers</div>\n        <div class=\"game-categories\">\n          {{category1}}{{#if category2}} • {{category2}}{{/if}}\n        </div>\n      </div>\n    </div>\n    {{/each}}\n  </div>",
        "contentPartials": [],
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "auto",
          "language": "html"
        },
        "editors": [
          "styles",
          "afterRender",
          "helpers"
        ],
        "externalStyles": [],
        "helpers": "context.handlebars.registerHelper(\"urlEncode\", function (text) {\r\n  return encodeURIComponent(text || '');\r\n});\r\n\r\ncontext.handlebars.registerHelper('formatViewers', function (viewers) {\r\n  if (!viewers) return '0';\r\n  if (viewers >= 1000000) {\r\n    return (viewers / 1000000).toFixed(1) + 'm';\r\n  } else if (viewers >= 1000) {\r\n    return (viewers / 1000).toFixed(0) + 'k';\r\n  } else {\r\n    return viewers;\r\n  }\r\n});\r\n",
        "renderMode": "allRows",
        "styles": ".top-games-container {\r\n  position: relative; \r\n}\r\n.games-content {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n  gap: 10px;\r\n  width: 100%;\r\n  opacity: 0;\r\n  transition: opacity 0.5s ease-in;\r\n}\r\n.game-card { \r\n  display: flex;\r\n  padding: 8px;\r\n  border-radius: 4px;\r\n  position: relative;\r\n}\r\n\r\n.game-thumbnail {\r\n  width: 52px;\r\n  height: 70px;\r\n  opacity: 0.7;\r\n  margin-right: 12px;\r\n  overflow: hidden;\r\n  border-radius: 4px;\r\n  flex-shrink: 0;\r\n  transition: all 0.2s ease-in-out;\r\n  will-change: transform;\r\n}\r\n.game-card:hover .game-thumbnail {\r\n  transform: scale(1.05) translateZ(0);\r\n  box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);\r\n  opacity: 1;\r\n}\r\n\r\n.game-thumbnail img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.game-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n}\r\n\r\n.game-name {\r\n  font-size: 0.9rem;\r\n  font-weight: 400;\r\n  color: #ffffff;\r\n  margin-bottom: 4px;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.game-viewers {\r\n  font-size: 0.8125rem;\r\n  color: #b0b0b0;\r\n  margin-bottom: 2px;\r\n}\r\n\r\n.game-categories {\r\n  font-size: 0.75rem;\r\n  color: #9e9e9e;\r\n}\r\n\r\n.new-tag {\r\n  background-color: #2f2f2f;\r\n  color: #ffffff;\r\n  padding: 1px 4px;\r\n  border-radius: 2px;\r\n  font-size: 0.6875rem;\r\n  margin-left: 4px;\r\n}\r\n.game-link {\r\n  text-decoration: none;\r\n  color: inherit;\r\n  display: block;\r\n  width: 100%;\r\n}\r\n\r\n.game-link:hover {\r\n  text-decoration: none;\r\n}\r\n\r\n.game-name .game-link {\r\n  color: #ffffff;\r\n}\r\n\r\n.game-thumbnail .game-link {\r\n  display: block;\r\n  height: 100%;\r\n}\r\n\r\n.top-games-container {\r\n  position: relative; \r\n}\r\n\r\n.games-content {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n  grid-gap:10px;\r\n  width: 100%;\r\n  opacity: 0;\r\n  transition: opacity 0.5s ease-in;\r\n}\r\n\r\n.game-card { \r\n  display: flex;\r\n  padding: 8px;\r\n  border-radius: 4px;\r\n  position: relative;\r\n}\r\n\r\n.game-thumbnail {\r\n  width: 52px;\r\n  height: 70px;\r\n  opacity: 0.7;\r\n  margin-right: 12px;\r\n  overflow: hidden;\r\n  border-radius: 4px;\r\n  flex-shrink: 0;\r\n  transition: all 0.2s ease-in-out;\r\n  will-change: transform;\r\n}\r\n\r\n.game-card:hover .game-thumbnail {\r\n  transform: scale(1.05) translateZ(0);\r\n  box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);\r\n  opacity: 1;\r\n}\r\n\r\n.game-thumbnail img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.game-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n}\r\n\r\n.game-name {\r\n  font-size: 0.9rem;\r\n  font-weight: 400;\r\n  color: #ffffff;\r\n  margin-bottom: 4px;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.game-viewers {\r\n  font-size: 0.8125rem;\r\n  color: #b0b0b0;\r\n  margin-bottom: 2px;\r\n}\r\n\r\n.game-categories {\r\n  font-size: 0.75rem;\r\n  color: #9e9e9e;\r\n}\r\n\r\n.new-tag {\r\n  background-color: #2f2f2f;\r\n  color: #ffffff;\r\n  padding: 1px 4px;\r\n  border-radius: 2px;\r\n  font-size: 0.6875rem;\r\n  margin-left: 4px;\r\n}\r\n\r\n.game-link {\r\n  text-decoration: none;\r\n  color: inherit;\r\n  display: block;\r\n  width: 100%;\r\n}\r\n\r\n.game-link:hover {\r\n  text-decoration: none;\r\n}\r\n\r\n.game-name .game-link {\r\n  color: #ffffff;\r\n}\r\n\r\n.game-thumbnail .game-link {\r\n  display: block;\r\n  height: 100%;\r\n}\r\n\r\n.loading-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 200px;\r\n  opacity: 1;\r\n  transition: all 0.5s ease-out;\r\n}\r\n\r\n.loading-text {\r\n  margin-top: 15px;\r\n  color: #b0b0b0;\r\n  font-size: 14px;\r\n}\r\n.top-games-container {\r\n  position: relative;\r\n}\r\n.top-games-container.loaded .games-content {\r\n  opacity: 1;\r\n}\r\n\r\n.top-games-container.loaded .loading-container {\r\n  opacity: 0;\r\n  pointer-events: none;\r\n    position: absolute;\r\n\r\n}\r\n\r\n// Stolen Loading Spinner\r\n\r\n.semipolar-spinner, .semipolar-spinner * {\r\n      box-sizing: border-box;\r\n    }\r\n\r\n    .semipolar-spinner {\r\n      height: 40px;\r\n      width: 40px;\r\n      position: relative;\r\n      transition: transform 0.5s ease-out;\r\n    }\r\n\r\n    .semipolar-spinner .ring {\r\n      border-radius: 50%;\r\n      position: absolute;\r\n      border: calc(40px * 0.05) solid transparent;\r\n      border-top-color: rgba(0, 162, 255, 0.5);\r\n      border-left-color: rgba(0, 162, 255, 0.5);\r\n      animation: semipolar-spinner-animation 2s infinite;\r\n    }\r\n\r\n    .semipolar-spinner .ring:nth-child(1) {\r\n      height: calc(40px - 40px * 0.2 * 0);\r\n      width: calc(40px - 40px * 0.2 * 0);\r\n      top: calc(40px * 0.1 * 0);\r\n      left: calc(40px * 0.1 * 0);\r\n      animation-delay: calc(2000ms * 0.1 * 4);\r\n      z-index: 5;\r\n    }\r\n\r\n    .semipolar-spinner .ring:nth-child(2) {\r\n      height: calc(40px - 40px * 0.2 * 1);\r\n      width: calc(40px - 40px * 0.2 * 1);\r\n      top: calc(40px * 0.1 * 1);\r\n      left: calc(40px * 0.1 * 1);\r\n      animation-delay: calc(2000ms * 0.1 * 3);\r\n      z-index: 4;\r\n    }\r\n\r\n    .semipolar-spinner .ring:nth-child(3) {\r\n      height: calc(40px - 40px * 0.2 * 2);\r\n      width: calc(40px - 40px * 0.2 * 2);\r\n      top: calc(40px * 0.1 * 2);\r\n      left: calc(40px * 0.1 * 2);\r\n      animation-delay: calc(2000ms * 0.1 * 2);\r\n      z-index: 3;\r\n    }\r\n\r\n    .semipolar-spinner .ring:nth-child(4) {\r\n      height: calc(40px - 40px * 0.2 * 3);\r\n      width: calc(40px - 40px * 0.2 * 3);\r\n      top: calc(40px * 0.1 * 3);\r\n      left: calc(40px * 0.1 * 3);\r\n      animation-delay: calc(2000ms * 0.1 * 1);\r\n      z-index: 2;\r\n    }\r\n\r\n    .semipolar-spinner .ring:nth-child(5) {\r\n      height: calc(40px - 40px * 0.2 * 4);\r\n      width: calc(40px - 40px * 0.2 * 4);\r\n      top: calc(40px * 0.1 * 4);\r\n      left: calc(40px * 0.1 * 4);\r\n      animation-delay: calc(2000ms * 0.1 * 0);\r\n      z-index: 1;\r\n    }\r\n\r\n    @keyframes semipolar-spinner-animation {\r\n      50% {\r\n        transform: rotate(360deg) scale(0.7);\r\n      }\r\n    }\r\n",
        "wrap": true
      },
      "pluginVersion": "5.7.0",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "queryType": "randomWalk",
          "refId": "A"
        }
      ],
      "timeFrom": "$refresh_trigger",
      "title": "Top Games",
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 11,
        "w": 5,
        "x": 19,
        "y": 16
      },
      "id": 24,
      "interval": "1m",
      "maxDataPoints": 1,
      "options": {
        "afterRender": "// Main function to fetch and display GitHub releases\r\nasync function loadGitHubReleases() {\r\n  try {\r\n    // Get repository names from dashboard variable\r\n    let repoNames = [];\r\n    try {\r\n      // Access the repos variable using replaceVariables\r\n      const reposString = context.grafana.replaceVariables(\"${github_repos}\") || \"\";\r\n\r\n      // Split by newlines or commas depending on your variable format\r\n      repoNames = reposString.split(/[,\\r\\n]/).map(item => item.trim()).filter(item => item !== \"\");\r\n\r\n      console.log(\"GitHub repositories from variable:\", repoNames);\r\n\r\n      if (repoNames.length === 0) {\r\n        // If no repos specified, show an error message\r\n        const releasesContent = document.querySelector('.github-releases-container .releases-content');\r\n        releasesContent.innerHTML = '<div class=\"error-message\">No GitHub repositories specified. Please add repository names to the github_repos variable.</div>';\r\n        document.querySelector('.github-releases-container').classList.add('loaded');\r\n        return;\r\n      }\r\n    } catch (e) {\r\n      console.error(\"Error accessing repos variable:\", e);\r\n    }\r\n\r\n    // Get maximum releases per repo from variable (default: 1)\r\n    let maxReleasesPerRepo = 1;\r\n    try {\r\n      const maxReleasesString = context.grafana.replaceVariables(\"${github_max_releases_per_repo}\") || \"1\";\r\n      maxReleasesPerRepo = parseInt(maxReleasesString, 10) || 1;\r\n    } catch (e) {\r\n      console.error(\"Error accessing max releases variable:\", e);\r\n    }\r\n\r\n    // Get maximum total releases from variable (default: 5)\r\n    let maxTotalReleases = 5;\r\n    try {\r\n      const maxTotalString = context.grafana.replaceVariables(\"${github_max_total_releases}\") || \"5\";\r\n      maxTotalReleases = parseInt(maxTotalString, 10) || 5;\r\n    } catch (e) {\r\n      console.error(\"Error accessing max total releases variable:\", e);\r\n    }\r\n\r\n    // Cache for successful proxy responses to avoid redundant fallback attempts\r\n    const proxyCache = new Map();\r\n\r\n    // Helper function to fetch with CORS proxy\r\n    async function fetchWithFallback(url) {\r\n      // Check if we've already determined the best proxy for similar URLs\r\n      const urlDomain = new URL(url).hostname;\r\n      if (proxyCache.has(urlDomain)) {\r\n        try {\r\n          const cachedProxy = proxyCache.get(urlDomain);\r\n          const response = await fetch(cachedProxy + encodeURIComponent(url));\r\n          if (response.ok) return response;\r\n        } catch (e) {\r\n          // Cache miss, continue to try all proxies\r\n          proxyCache.delete(urlDomain);\r\n        }\r\n      }\r\n\r\n      // Primary proxy - corsproxy.io\r\n      try {\r\n        const corsproxyUrl = `https://corsproxy.io/?url=${encodeURIComponent(url)}`;\r\n        const response = await fetch(corsproxyUrl);\r\n        if (response.ok) {\r\n          proxyCache.set(urlDomain, 'https://corsproxy.io/?url=');\r\n          return response;\r\n        }\r\n      } catch (e) {\r\n        console.warn(`corsproxy.io proxy failed for ${url}`);\r\n      }\r\n\r\n      // Fallback proxies with optimized timeout handling\r\n      const fallbackProxies = [\r\n        'https://api.allorigins.win/raw?url='\r\n      ];\r\n\r\n      // Try fallbacks with Promise.race to improve performance\r\n      const proxyPromises = fallbackProxies.map(async (proxy) => {\r\n        try {\r\n          const controller = new AbortController();\r\n          const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 second timeout\r\n\r\n          const response = await fetch(proxy + encodeURIComponent(url), {\r\n            signal: controller.signal\r\n          });\r\n\r\n          clearTimeout(timeoutId);\r\n\r\n          if (response.ok) {\r\n            proxyCache.set(urlDomain, proxy);\r\n            return { response, proxy };\r\n          }\r\n        } catch (e) {\r\n          return { error: e, proxy };\r\n        }\r\n      });\r\n\r\n      try {\r\n        const result = await Promise.race(proxyPromises);\r\n        if (result && result.response) {\r\n          return result.response;\r\n        }\r\n      } catch (e) {\r\n        console.warn(`All proxy fallbacks failed concurrently for ${url}`);\r\n      }\r\n\r\n      // Last resort - direct fetch (might fail due to CORS)\r\n      try {\r\n        const directResponse = await fetch(url);\r\n        if (directResponse.ok) {\r\n          proxyCache.set(urlDomain, '');  // Empty string means direct access works\r\n          return directResponse;\r\n        }\r\n      } catch (e) {\r\n        console.warn(`Direct fetch failed for ${url}: ${e.message}`);\r\n      }\r\n\r\n      throw new Error(`Could not fetch ${url} with any available method`);\r\n    }\r\n\r\n\r\n    // Fetch releases for all repositories\r\n    const allReleases = [];\r\n    const failedRepos = [];\r\n\r\n    // Process repositories in sequence\r\n    for (const repoName of repoNames) {\r\n      try {\r\n        // Fetch the RSS feed for releases\r\n        const rssFeedUrl = `https://github.com/${repoName}/releases.atom`;\r\n        const response = await fetchWithFallback(rssFeedUrl);\r\n        const xmlText = await response.text();\r\n        const parser = new DOMParser();\r\n        const xmlDoc = parser.parseFromString(xmlText, \"text/xml\");\r\n\r\n        // Get entries (releases)\r\n        const entries = xmlDoc.querySelectorAll(\"entry\");\r\n        let releaseCount = 0;\r\n\r\n        for (const entry of entries) {\r\n          if (releaseCount >= maxReleasesPerRepo) break;\r\n\r\n          const title = entry.querySelector(\"title\")?.textContent || \"Unnamed Release\";\r\n          const link = entry.querySelector(\"link\")?.getAttribute(\"href\") || \"\";\r\n          const published = entry.querySelector(\"published\")?.textContent;\r\n          const updated = entry.querySelector(\"updated\")?.textContent;\r\n\r\n          // Get tag name from URL or content\r\n          let tagName = \"\";\r\n          if (link) {\r\n            const tagMatch = link.match(/\\/tag\\/([^\\/]+)$/);\r\n            if (tagMatch) {\r\n              tagName = tagMatch[1];\r\n            }\r\n          }\r\n\r\n          // Find the author\r\n          let author = entry.querySelector(\"author > name\")?.textContent || \"\";\r\n\r\n          allReleases.push({\r\n            repoName: repoName,\r\n            title: title,\r\n            tagName: tagName,\r\n            link: link,\r\n            publishedAt: published || updated,\r\n            author: author,\r\n            isDraft: title.includes(\"Draft Release\") || title.includes(\"Pre-release\")\r\n          });\r\n\r\n          releaseCount++;\r\n        }\r\n\r\n        if (releaseCount === 0) {\r\n          console.log(`No releases found for repository ${repoName}`);\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error fetching releases for repository ${repoName}:`, error);\r\n        failedRepos.push(repoName);\r\n      }\r\n\r\n      // Add a small delay between repository requests\r\n      await new Promise(resolve => setTimeout(resolve, 300));\r\n    }\r\n\r\n    // Sort releases by date (newest first)\r\n    allReleases.sort((a, b) => new Date(b.publishedAt) - new Date(a.publishedAt));\r\n\r\n    // Limit to maximum total releases\r\n    const limitedReleases = allReleases.slice(0, maxTotalReleases);\r\n\r\n    // Process and update the DOM\r\n    const releasesContent = document.querySelector('.github-releases-container .releases-content');\r\n    releasesContent.innerHTML = '';\r\n\r\n    if (limitedReleases.length === 0) {\r\n      releasesContent.innerHTML = '<div class=\"error-message\">No releases found for the specified repositories.</div>';\r\n\r\n      if (failedRepos.length > 0) {\r\n        releasesContent.innerHTML += `<div class=\"error-message\">Failed to fetch releases from repositories: ${failedRepos.join(', ')}</div>`;\r\n      }\r\n    } else {\r\n      if (failedRepos.length > 0) {\r\n        const warningDiv = document.createElement('div');\r\n        warningDiv.className = 'warning-message';\r\n        warningDiv.innerHTML = `Note: Failed to fetch releases from repositories: ${failedRepos.join(', ')}`;\r\n        releasesContent.appendChild(warningDiv);\r\n      }\r\n\r\n      limitedReleases.forEach(release => {\r\n        // Create compact release card\r\n        const releaseCard = document.createElement('div');\r\n        releaseCard.className = 'release-card';\r\n\r\n        releaseCard.innerHTML = `\r\n          <div class=\"release-info\">\r\n            <div class=\"release-repo\">\r\n              <a href=\"https://github.com/${release.repoName}\" target=\"_blank\" class=\"repo-link\">\r\n                ${release.repoName}\r\n              </a>\r\n            </div>\r\n            <div class=\"release-title\">\r\n              <a href=\"${release.link}\" target=\"_blank\" class=\"release-link\">\r\n                ${release.title}\r\n              </a>\r\n            </div>\r\n            <div class=\"release-metadata\">\r\n              ${release.tagName ? `<span class=\"release-tag\">${release.tagName}</span>` : ''}\r\n              <span class=\"release-date\">${formatDate(release.publishedAt)}</span>\r\n              ${release.author ? `<span class=\"release-author\">by ${release.author}</span>` : ''}\r\n            </div>\r\n          </div>\r\n        `;\r\n\r\n        releasesContent.appendChild(releaseCard);\r\n      });\r\n    }\r\n\r\n    document.querySelector('.github-releases-container').classList.add('loaded');\r\n  } catch (error) {\r\n    console.error(\"Error loading GitHub releases:\", error);\r\n    const releasesContent = document.querySelector('.github-releases-container .releases-content');\r\n    releasesContent.innerHTML = `<div class=\"error-message\">Error loading releases: ${error.message}</div>`;\r\n    document.querySelector('.github-releases-container').classList.add('loaded');\r\n  }\r\n}\r\n\r\n\r\n// Helper function for date formatting inside the script\r\nfunction formatDate(dateString) {\r\n  if (!dateString) return '';\r\n\r\n  const date = new Date(dateString);\r\n  const now = new Date();\r\n  const diffTime = Math.abs(now - date);\r\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n  if (diffDays < 1) {\r\n    const diffHours = Math.floor(diffTime / (1000 * 60 * 60));\r\n    if (diffHours < 1) {\r\n      const diffMinutes = Math.floor(diffTime / (1000 * 60));\r\n      return diffMinutes === 1 ? '1 minute ago' : diffMinutes + ' minutes ago';\r\n    }\r\n    return diffHours === 1 ? '1 hour ago' : diffHours + ' hours ago';\r\n  } else if (diffDays === 1) {\r\n    return 'Yesterday';\r\n  } else if (diffDays < 7) {\r\n    return diffDays === 1 ? '1 day ago' : diffDays + ' days ago';\r\n  } else if (diffDays < 30) {\r\n    const diffWeeks = Math.floor(diffDays / 7);\r\n    return diffWeeks === 1 ? '1 week ago' : diffWeeks + ' weeks ago';\r\n  } else if (diffDays < 365) {\r\n    const diffMonths = Math.floor(diffDays / 30);\r\n    return diffMonths === 1 ? '1 month ago' : diffMonths + ' months ago';\r\n  } else {\r\n    const diffYears = Math.floor(diffDays / 365);\r\n    return diffYears === 1 ? '1 year ago' : diffYears + ' years ago';\r\n  }\r\n}\r\n\r\n\r\n// Start loading releases\r\nloadGitHubReleases();\r\n",
        "content": "<div class=\"github-releases-container\">\n  <div class=\"loading-container\">\n    <div class=\"semipolar-spinner\">\n      <div class=\"ring\"></div>\n      <div class=\"ring\"></div>\n      <div class=\"ring\"></div>\n      <div class=\"ring\"></div>\n      <div class=\"ring\"></div>\n    </div>\n    <div class=\"loading-text\">Loading GitHub releases...</div>\n  </div>\n\n  <div class=\"releases-content\">\n    <!-- Content will be dynamically generated by JavaScript -->\n  </div>\n</div>",
        "contentPartials": [],
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "auto",
          "language": "html"
        },
        "editors": [
          "styles",
          "afterRender",
          "helpers"
        ],
        "externalStyles": [],
        "helpers": "context.handlebars.registerHelper(\"urlEncode\", function (text) {\r\n  return encodeURIComponent(text || '');\r\n});\r\n\r\ncontext.handlebars.registerHelper('formatDate', function (dateString) {\r\n  if (!dateString) return '';\r\n\r\n  const date = new Date(dateString);\r\n  const now = new Date();\r\n  const diffTime = Math.abs(now - date);\r\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n  if (diffDays < 1) {\r\n    const diffHours = Math.floor(diffTime / (1000 * 60 * 60));\r\n    if (diffHours < 1) {\r\n      const diffMinutes = Math.floor(diffTime / (1000 * 60));\r\n      return diffMinutes === 1 ? '1 minute ago' : diffMinutes + ' minutes ago';\r\n    }\r\n    return diffHours === 1 ? '1 hour ago' : diffHours + ' hours ago';\r\n  } else if (diffDays === 1) {\r\n    return 'Yesterday';\r\n  } else if (diffDays < 7) {\r\n    return diffDays === 1 ? '1 day ago' : diffDays + ' days ago';\r\n  } else if (diffDays < 30) {\r\n    const diffWeeks = Math.floor(diffDays / 7);\r\n    return diffWeeks === 1 ? '1 week ago' : diffWeeks + ' weeks ago';\r\n  } else if (diffDays < 365) {\r\n    const diffMonths = Math.floor(diffDays / 30);\r\n    return diffMonths === 1 ? '1 month ago' : diffMonths + ' months ago';\r\n  } else {\r\n    const diffYears = Math.floor(diffDays / 365);\r\n    return diffYears === 1 ? '1 year ago' : diffYears + ' years ago';\r\n  }\r\n});\r\n",
        "hideTimeOverride": true,
        "renderMode": "allRows",
        "styles": ".github-releases-container {\r\n  position: relative; \r\n}\r\n\r\n.releases-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  opacity: 0;\r\n  transition: opacity 0.5s ease-in;\r\n}\r\n\r\n.release-card { \r\n  display: flex;\r\n  padding: 8px;\r\n  position: relative;\r\n  overflow: hidden;\r\n  transition: transform 0.2s ease;\r\n  will-change: transform;\r\n}\r\n\r\n.release-card:hover {\r\n  transform: scale(1.01);\r\n\r\n}\r\n\r\n.release-info {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.release-repo {\r\n  font-size: 14px;\r\n  color: #aaaaaa;\r\n  margin-bottom: 3px;\r\n}\r\n\r\n.release-title {\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: #ffffff;\r\n  margin-bottom: 4px;\r\n  line-height: 1.3;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  overflow: hidden;\r\n}\r\n\r\n.release-metadata {\r\n  font-size: 12px;\r\n  color: #909090;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 6px;\r\n}\r\n\r\n.release-tag {\r\n  background-color: rgba(88, 166, 255, 0.15);\r\n  color: #58a6ff;\r\n  padding: 1px 8px;\r\n  border-radius: 10px;\r\n  font-weight: 500;\r\n}\r\n\r\n.release-link, .repo-link {\r\n  color: inherit;\r\n  text-decoration: none;\r\n  transition: color 0.2s ease;\r\n}\r\n\r\n.release-title .release-link {\r\n  color: #ffffff;\r\n}\r\n\r\n.release-title .release-link:hover {\r\n  color: #3274d9;\r\n}\r\n\r\n.release-repo .repo-link {\r\n  color: #aaaaaa;\r\n}\r\n\r\n.release-repo .repo-link:hover {\r\n  color: #ffffff;\r\n}\r\n\r\n/* Loading spinner styles */\r\n.loading-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 200px;\r\n  opacity: 1;\r\n  transition: all 0.5s ease-out;\r\n}\r\n\r\n.github-releases-container.loaded .releases-content {\r\n  opacity: 1;\r\n}\r\n\r\n.github-releases-container.loaded .loading-container {\r\n  opacity: 0;\r\n  pointer-events: none;\r\n  position: absolute;\r\n}\r\n\r\n.semipolar-spinner, .semipolar-spinner * {\r\n  box-sizing: border-box;\r\n}\r\n\r\n.semipolar-spinner {\r\n  height: 40px;\r\n  width: 40px;\r\n  position: relative;\r\n}\r\n\r\n.semipolar-spinner .ring {\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  border: calc(40px * 0.05) solid transparent;\r\n  border-top-color: rgba(0, 162, 255, 0.5);\r\n  border-left-color: rgba(0, 162, 255, 0.5);\r\n  animation: semipolar-spinner-animation 2s infinite;\r\n}\r\n\r\n.semipolar-spinner .ring:nth-child(1) {\r\n  height: 40px;\r\n  width: 40px;\r\n  left: 0;\r\n  top: 0;\r\n  animation-delay: 0.2s;\r\n}\r\n\r\n.semipolar-spinner .ring:nth-child(2) {\r\n  height: 32px;\r\n  width: 32px;\r\n  left: 4px;\r\n  top: 4px;\r\n  animation-delay: 0.4s;\r\n}\r\n\r\n.semipolar-spinner .ring:nth-child(3) {\r\n  height: 24px;\r\n  width: 24px;\r\n  left: 8px;\r\n  top: 8px;\r\n  animation-delay: 0.6s;\r\n}\r\n\r\n.semipolar-spinner .ring:nth-child(4) {\r\n  height: 16px;\r\n  width: 16px;\r\n  left: 12px;\r\n  top: 12px;\r\n  animation-delay: 0.8s;\r\n}\r\n\r\n.semipolar-spinner .ring:nth-child(5) {\r\n  height: 8px;\r\n  width: 8px;\r\n  left: 16px;\r\n  top: 16px;\r\n  animation-delay: 1s;\r\n}\r\n\r\n@keyframes semipolar-spinner-animation {\r\n  50% {\r\n    transform: rotate(360deg) scale(0.7);\r\n  }\r\n}\r\n\r\n.loading-text {\r\n  margin-top: 16px;\r\n  font-size: 14px;\r\n  color: #aaaaaa;\r\n}\r\n\r\n.warning-message {\r\n  background-color: rgba(255, 193, 7, 0.2);\r\n  color: #e6c944;\r\n  padding: 8px;\r\n  border-radius: 4px;\r\n  margin-bottom: 16px;\r\n  font-size: 13px;\r\n}\r\n\r\n.error-message {\r\n  background-color: rgba(244, 67, 54, 0.2);\r\n  color: #f44336;\r\n  padding: 8px;\r\n  border-radius: 4px;\r\n  margin-bottom: 16px;\r\n  font-size: 13px;\r\n}\r\n",
        "timeFrom": "$refresh_trigger",
        "wrap": true
      },
      "pluginVersion": "5.7.0",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "queryType": "randomWalk",
          "refId": "A"
        }
      ],
      "title": "Releases",
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "grafana"
      },
      "fieldConfig": {
        "defaults": {
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 14,
        "x": 5,
        "y": 17
      },
      "id": 22,
      "interval": "1m",
      "maxDataPoints": 1,
      "options": {
        "afterRender": "// Handle initial image errors\r\ndocument.querySelectorAll('.video-thumbnail img').forEach(img => {\r\n  img.onerror = function () {\r\n    this.src = 'https://i.ytimg.com/vi/error/mqdefault.jpg';\r\n  }\r\n});\r\n\r\n// Improved YouTube RSS feed fetching function inspired by glanceapp/glance\r\nasync function fetchYouTubeVideos(channelOrPlaylistIDs, includeShorts = false) {\r\n  const videos = [];\r\n  const failedChannels = [];\r\n  const requests = [];\r\n\r\n  // Build request objects for all channels/playlists\r\n  for (const id of channelOrPlaylistIDs) {\r\n    let feedUrl;\r\n\r\n    if (id.startsWith('playlist:')) {\r\n      // Handle playlist feeds\r\n      const playlistId = id.replace('playlist:', '');\r\n      feedUrl = `https://www.youtube.com/feeds/videos.xml?playlist_id=${playlistId}&origin=https://graf.it-baer.net`;\r\n    } else if (!includeShorts && id.startsWith('UC')) {\r\n      // Special handling to exclude shorts (using long-form-only playlist)\r\n      // Convert channel ID to its long-form-only playlist equivalent\r\n      const playlistId = id.replace('UC', 'UULF');\r\n      feedUrl = `https://www.youtube.com/feeds/videos.xml?playlist_id=${playlistId}&origin=https://graf.it-baer.net`;\r\n    } else {\r\n      // Regular channel feed\r\n      feedUrl = `https://www.youtube.com/feeds/videos.xml?channel_id=${id}&origin=https://graf.it-baer.net`;\r\n    }\r\n\r\n    // Add to requests array\r\n    requests.push({ id, feedUrl });\r\n  }\r\n\r\n  // Cache for successful proxy responses to avoid redundant fallback attempts\r\n  const proxyCache = new Map();\r\n\r\n  // Optimized helper function to fetch with CORS proxy\r\n  async function fetchWithProxy(url) {\r\n    // Check if we've already determined the best proxy for similar URLs\r\n    const urlDomain = new URL(url).hostname;\r\n    if (proxyCache.has(urlDomain)) {\r\n      try {\r\n        const cachedProxy = proxyCache.get(urlDomain);\r\n        const response = await fetch(cachedProxy + encodeURIComponent(url));\r\n        if (response.ok) return response;\r\n      } catch (e) {\r\n        // Cache miss, continue to try all proxies\r\n        proxyCache.delete(urlDomain);\r\n      }\r\n    }\r\n\r\n    // Primary proxy - corsproxy.io\r\n    try {\r\n      const corsproxyUrl = `https://corsproxy.io/?url=${encodeURIComponent(url)}`;\r\n      const response = await fetch(corsproxyUrl);\r\n      if (response.ok) {\r\n        proxyCache.set(urlDomain, 'https://corsproxy.io/?url=');\r\n        return response;\r\n      }\r\n    } catch (e) {\r\n      console.warn(`corsproxy.io proxy failed for ${url}`);\r\n    }\r\n\r\n    // Fallback proxies with optimized timeout handling\r\n    const fallbackProxies = [\r\n      'https://api.allorigins.win/raw?url='\r\n    ];\r\n\r\n    // Try fallbacks with Promise.race to improve performance\r\n    const proxyPromises = fallbackProxies.map(async (proxy) => {\r\n      try {\r\n        const controller = new AbortController();\r\n        const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 second timeout\r\n\r\n        const response = await fetch(proxy + encodeURIComponent(url), {\r\n          signal: controller.signal\r\n        });\r\n\r\n        clearTimeout(timeoutId);\r\n\r\n        if (response.ok) {\r\n          proxyCache.set(urlDomain, proxy);\r\n          return { response, proxy };\r\n        }\r\n      } catch (e) {\r\n        return { error: e, proxy };\r\n      }\r\n    });\r\n\r\n    try {\r\n      const result = await Promise.race(proxyPromises);\r\n      if (result && result.response) {\r\n        return result.response;\r\n      }\r\n    } catch (e) {\r\n      console.warn(`All proxy fallbacks failed concurrently for ${url}`);\r\n    }\r\n\r\n    // Last resort - direct fetch (might fail due to CORS)\r\n    try {\r\n      const directResponse = await fetch(url);\r\n      if (directResponse.ok) {\r\n        proxyCache.set(urlDomain, '');  // Empty string means direct access works\r\n        return directResponse;\r\n      }\r\n    } catch (e) {\r\n      console.warn(`Direct fetch failed for ${url}: ${e.message}`);\r\n    }\r\n\r\n    throw new Error(`Could not fetch ${url} with any available method`);\r\n  }\r\n\r\n  // Process requests in parallel with a limit on concurrent requests\r\n  const concurrencyLimit = 5;\r\n  const chunks = [];\r\n\r\n  for (let i = 0; i < requests.length; i += concurrencyLimit) {\r\n    chunks.push(requests.slice(i, i + concurrencyLimit));\r\n  }\r\n\r\n  for (const chunk of chunks) {\r\n    const chunkPromises = chunk.map(async ({ id, feedUrl }) => {\r\n      try {\r\n        // Use the optimized fetchWithProxy function\r\n        const response = await fetchWithProxy(feedUrl);\r\n        const xmlText = await response.text();\r\n        const parser = new DOMParser();\r\n        const xmlDoc = parser.parseFromString(xmlText, \"text/xml\");\r\n\r\n        // Get channel info\r\n        const channelTitle = xmlDoc.querySelector(\"author > name\")?.textContent || \"Unknown Channel\";\r\n        const channelLink = xmlDoc.querySelector(\"author > uri\")?.textContent || `https://www.youtube.com/channel/${id}`;\r\n\r\n        // Get entries (videos)\r\n        const entries = xmlDoc.querySelectorAll(\"entry\");\r\n\r\n        for (const entry of entries) {\r\n          const title = entry.querySelector(\"title\")?.textContent || \"Untitled Video\";\r\n          const publishedText = entry.querySelector(\"published\")?.textContent;\r\n          const publishedDate = publishedText ? new Date(publishedText) : new Date();\r\n\r\n          // Get video link and extract ID\r\n          const link = entry.querySelector(\"link\")?.getAttribute(\"href\") || \"\";\r\n          // More robustly extract the video ID\r\n          let videoId;\r\n          try {\r\n            videoId = new URL(link).searchParams.get(\"v\");\r\n          } catch (e) {\r\n            // Fallback method to extract video ID if URL parsing fails\r\n            const idMatch = link.match(/[?&]v=([^&]+)/);\r\n            videoId = idMatch ? idMatch[1] : null;\r\n          }\r\n\r\n          if (!videoId) continue; // Skip videos without a valid ID\r\n\r\n          // Get thumbnail\r\n          const mediaGroup = entry.querySelector(\"media\\\\:group, group\");\r\n          const thumbnail = mediaGroup ?\r\n            mediaGroup.querySelector(\"media\\\\:thumbnail, thumbnail\")?.getAttribute(\"url\") :\r\n            `https://i.ytimg.com/vi/${videoId}/mqdefault.jpg`;\r\n\r\n          videos.push({\r\n            id: videoId,\r\n            title: title,\r\n            channelId: id,\r\n            channelTitle: channelTitle,\r\n            channelUrl: channelLink,\r\n            publishedAt: publishedDate.toISOString(),\r\n            thumbnailUrl: thumbnail || `https://i.ytimg.com/vi/${videoId}/mqdefault.jpg`,\r\n            url: `https://www.youtube.com/watch?v=${videoId}`\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error fetching feed for ${id}:`, error);\r\n        failedChannels.push(id);\r\n      }\r\n    });\r\n\r\n    // Wait for current chunk to complete before moving to next\r\n    await Promise.all(chunkPromises);\r\n  }\r\n\r\n  // Sort videos by date (newest first)\r\n  videos.sort((a, b) => new Date(b.publishedAt) - new Date(a.publishedAt));\r\n\r\n  return {\r\n    videos,\r\n    failedChannels,\r\n    hasErrors: failedChannels.length > 0\r\n  };\r\n}\r\n\r\n// Main function to load YouTube videos\r\n(async function loadYouTubeVideos() {\r\n  // Add timestamp to console logs for debugging performance\r\n  console.log(`[${new Date().toISOString()}] Starting YouTube videos fetch`);\r\n\r\n  try {\r\n    // Get channel IDs from dashboard variable\r\n    let channelIds = [];\r\n    try {\r\n      // Access the channels variable using replaceVariables\r\n      const channelsString = context.grafana.replaceVariables(\"${youtube_channels}\") || \"\";\r\n\r\n      // Split by newlines or commas depending on your variable format\r\n      channelIds = channelsString.split(/[,\\r\\n]/).map(item => item.trim()).filter(item => item !== \"\");\r\n\r\n      console.log(\"Channel IDs from variable:\", channelIds);\r\n\r\n      if (channelIds.length === 0) {\r\n        // If no channels specified, show an error message\r\n        const videosContent = document.querySelector('.youtube-videos-container .videos-content');\r\n        videosContent.innerHTML = '<div class=\"error-message\">No YouTube channels specified. Please add channel IDs to the youtube_channels variable.</div>';\r\n        document.querySelector('.youtube-videos-container').classList.add('loaded');\r\n        return;\r\n      }\r\n    } catch (e) {\r\n      console.error(\"Error accessing channels variable:\", e);\r\n    }\r\n\r\n    // Get maximum videos per channel from variable (default: 2)\r\n    let maxVideosPerChannel = 5;\r\n    try {\r\n      const maxVideosString = context.grafana.replaceVariables(\"${youtube_max_videos_per_channel}\") || \"5\";\r\n      maxVideosPerChannel = parseInt(maxVideosString, 10) || 5;\r\n    } catch (e) {\r\n      console.error(\"Error accessing max videos variable:\", e);\r\n    }\r\n\r\n    // Get maximum total videos from variable (default: 5)\r\n    let maxTotalVideos = 16;\r\n    try {\r\n      const maxTotalString = context.grafana.replaceVariables(\"${youtube_max_total_videos}\") || \"15\";\r\n      maxTotalVideos = parseInt(maxTotalString, 10) || 16;\r\n    } catch (e) {\r\n      console.error(\"Error accessing max total videos variable:\", e);\r\n    }\r\n\r\n    // Determine whether to include Shorts\r\n    let includeShorts = false;\r\n    try {\r\n      const includeShortsString = context.grafana.replaceVariables(\"${youtube_include_shorts}\") || \"false\";\r\n      includeShorts = includeShortsString.toLowerCase() === \"true\";\r\n    } catch (e) {\r\n      console.error(\"Error accessing include shorts variable:\", e);\r\n    }\r\n\r\n    console.log(`[${new Date().toISOString()}] Fetching videos for ${channelIds.length} channels`);\r\n\r\n    // Fetch videos using our improved function\r\n    const result = await fetchYouTubeVideos(channelIds, includeShorts);\r\n\r\n    console.log(`[${new Date().toISOString()}] Fetched ${result.videos.length} videos, ${result.failedChannels.length} failed channels`);\r\n\r\n    // Filter to maximum per channel\r\n    const videosByChannel = {};\r\n    for (const video of result.videos) {\r\n      if (!videosByChannel[video.channelId]) {\r\n        videosByChannel[video.channelId] = [];\r\n      }\r\n\r\n      if (videosByChannel[video.channelId].length < maxVideosPerChannel) {\r\n        videosByChannel[video.channelId].push(video);\r\n      }\r\n    }\r\n\r\n    // Flatten back to a single array\r\n    let allVideos = [];\r\n    for (const channelVideos of Object.values(videosByChannel)) {\r\n      allVideos = allVideos.concat(channelVideos);\r\n    }\r\n\r\n    // Sort again by date\r\n    allVideos.sort((a, b) => new Date(b.publishedAt) - new Date(a.publishedAt));\r\n\r\n    // Limit to maximum total videos\r\n    const limitedVideos = allVideos.slice(0, maxTotalVideos);\r\n\r\n    // Process and update the DOM\r\n    const videosContent = document.querySelector('.youtube-videos-container .videos-content');\r\n    videosContent.innerHTML = '';\r\n\r\n    if (limitedVideos.length === 0) {\r\n      videosContent.innerHTML = '<div class=\"error-message\">No videos found for the specified channels.</div>';\r\n\r\n      if (result.failedChannels.length > 0) {\r\n        videosContent.innerHTML += `<div class=\"error-message\">Failed to fetch videos from channels: ${result.failedChannels.join(', ')}</div>`;\r\n      }\r\n    } else {\r\n      if (result.failedChannels.length > 0) {\r\n        const warningDiv = document.createElement('div');\r\n        warningDiv.className = 'warning-message';\r\n        warningDiv.innerHTML = `Note: Failed to fetch videos from channels: ${result.failedChannels.join(', ')}`;\r\n        videosContent.appendChild(warningDiv);\r\n      }\r\n\r\n      // Use document fragment for better performance\r\n      const fragment = document.createDocumentFragment();\r\n\r\n      limitedVideos.forEach(video => {\r\n        // Create video card\r\n        const videoCard = document.createElement('div');\r\n        videoCard.className = 'video-card';\r\n\r\n        videoCard.innerHTML = `\r\n          <div class=\"video-thumbnail\">\r\n            <a href=\"${video.url}\" target=\"_blank\" class=\"video-link\">\r\n              <img src=\"${video.thumbnailUrl}\" \r\n                  alt=\"${video.title}\"\r\n                  onerror=\"this.src='https://i.ytimg.com/vi/error/mqdefault.jpg'\">\r\n            </a>\r\n          </div>\r\n          <div class=\"video-info\">\r\n            <div class=\"video-title\">\r\n              <a href=\"${video.url}\" target=\"_blank\" class=\"video-link\">${video.title}</a>\r\n            </div>\r\n            <div class=\"video-channel\">\r\n              <a href=\"${video.channelUrl}\" target=\"_blank\" class=\"channel-link\">${video.channelTitle}</a>\r\n            </div>\r\n            <div class=\"video-metadata\">\r\n              ${formatDate(video.publishedAt)}\r\n            </div>\r\n          </div>\r\n        `;\r\n\r\n        fragment.appendChild(videoCard);\r\n      });\r\n\r\n      videosContent.appendChild(fragment);\r\n    }\r\n\r\n    document.querySelector('.youtube-videos-container').classList.add('loaded');\r\n    console.log(`[${new Date().toISOString()}] YouTube videos loaded successfully`);\r\n  } catch (error) {\r\n    console.error(\"Error loading YouTube videos:\", error);\r\n    const videosContent = document.querySelector('.youtube-videos-container .videos-content');\r\n    videosContent.innerHTML = `<div class=\"error-message\">Error loading videos: ${error.message}</div>`;\r\n    document.querySelector('.youtube-videos-container').classList.add('loaded');\r\n  }\r\n})();\r\nfunction formatDate(dateString) {\r\n  if (!dateString) return '';\r\n\r\n  const date = new Date(dateString);\r\n  const now = new Date();\r\n  const diffTime = Math.abs(now - date);\r\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n  if (diffDays < 1) {\r\n    const diffHours = Math.floor(diffTime / (1000 * 60 * 60));\r\n    if (diffHours < 1) {\r\n      const diffMinutes = Math.floor(diffTime / (1000 * 60));\r\n      return diffMinutes + ' minutes ago';\r\n    }\r\n    return diffHours + ' hours ago';\r\n  } else if (diffDays === 1) {\r\n    return 'Yesterday';\r\n  } else if (diffDays < 7) {\r\n    return diffDays + ' days ago';\r\n  } else if (diffDays < 30) {\r\n    const diffWeeks = Math.floor(diffDays / 7);\r\n    return diffWeeks + ' weeks ago';\r\n  } else if (diffDays < 365) {\r\n    const diffMonths = Math.floor(diffDays / 30);\r\n    return diffMonths + ' months ago';\r\n  } else {\r\n    const diffYears = Math.floor(diffDays / 365);\r\n    return diffYears + ' years ago';\r\n  }\r\n}",
        "content": "<div class=\"youtube-videos-container\">\n  <div class=\"loading-container\">\n    <div class=\"semipolar-spinner\">\n      <div class=\"ring\"></div>\n      <div class=\"ring\"></div>\n      <div class=\"ring\"></div>\n      <div class=\"ring\"></div>\n      <div class=\"ring\"></div>\n    </div>\n    <div class=\"loading-text\">Loading YouTube videos...</div>\n  </div>\n  <div class=\"videos-content\">\n    <!-- Content will be dynamically generated by JavaScript -->\n  </div>\n</div>",
        "contentPartials": [],
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "auto",
          "language": "html"
        },
        "editors": [
          "styles",
          "afterRender",
          "helpers"
        ],
        "externalStyles": [],
        "helpers": "",
        "hideTimeOverride": true,
        "renderMode": "allRows",
        "styles": ".youtube-videos-container {\r\n  position: relative; \r\n}\r\n\r\n.videos-content {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n  gap: 16px;\r\n  width: 100%;\r\n  opacity: 0;\r\n  transition: opacity 0.5s ease-in;\r\n}\r\n\r\n.video-card {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n  border-radius: 8px;\r\n  position: relative;\r\n  overflow: hidden;\r\n  transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\r\n}\r\n\r\n.video-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 7px 14px rgba(0, 0, 0, 0.25), 0 5px 5px rgba(0, 0, 0, 0.22);\r\n  background-color: rgba(32, 34, 38, 0.2);\r\n}\r\n\r\n.video-thumbnail {\r\n  position: relative;\r\n  width: 100%;\r\n  aspect-ratio: 16/9;\r\n  border-radius: 6px;\r\n  overflow: hidden;\r\n  margin-bottom: 10px;\r\n  transition: opacity 0.2s ease;\r\n}\r\n.video-thumbnail .video-link {\r\n  display: block;\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 10;\r\n}\r\n.video-thumbnail img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  transition: transform 0.5s cubic-bezier(0.25, 0.8, 0.25, 1);\r\n}\r\n\r\n.video-card:hover .video-thumbnail img {\r\n  transform: scale(1.05);\r\n}\r\n\r\n.video-duration {\r\n  position: absolute;\r\n  bottom: 5px;\r\n  right: 5px;\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n  color: #ffffff;\r\n  padding: 2px 4px;\r\n  border-radius: 2px;\r\n  font-size: 12px;\r\n  font-weight: 500;\r\n}\r\n\r\n.video-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.video-link {\r\n  color: inherit;\r\n  text-decoration: none;\r\n  transition: color 0.2s ease;\r\n}\r\n\r\n.video-title .video-link {\r\n  color: #ffffff;\r\n}\r\n\r\n.video-title .video-link:hover {\r\n  color: #3274d9; /* Grafana blue */\r\n}\r\n\r\n.video-channel .channel-link {\r\n  color: #aaaaaa;\r\n  text-decoration: none;\r\n  transition: color 0.2s ease;\r\n}\r\n\r\n.video-channel .channel-link:hover {\r\n  color: #ffffff;\r\n}\r\n\r\n.video-title {\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: #ffffff;\r\n  margin-bottom: 6px;\r\n  line-height: 1.3;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  overflow: hidden;\r\n}\r\n\r\n.video-channel {\r\n  font-size: 13px;\r\n  color: #aaaaaa;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.video-metadata {\r\n  font-size: 12px;\r\n  color: #909090;\r\n}\r\n\r\n/* Loading spinner styles and other utility classes */\r\n.loading-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 200px;\r\n  opacity: 1;\r\n  transition: all 0.5s ease-out;\r\n}\r\n\r\n.youtube-videos-container.loaded .videos-content {\r\n  opacity: 1;\r\n}\r\n\r\n.youtube-videos-container.loaded .loading-container {\r\n  opacity: 0;\r\n  pointer-events: none;\r\n  position: absolute;\r\n}\r\n\r\n/* Loading Spinner */\r\n.semipolar-spinner, .semipolar-spinner * {\r\n  box-sizing: border-box;\r\n}\r\n\r\n.semipolar-spinner {\r\n  height: 40px;\r\n  width: 40px;\r\n  position: relative;\r\n  transition: transform 0.5s ease-out;\r\n}\r\n\r\n.semipolar-spinner .ring {\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  border: calc(40px * 0.05) solid transparent;\r\n  border-top-color: rgba(0, 162, 255, 0.5);\r\n  border-left-color: rgba(0, 162, 255, 0.5);\r\n  animation: semipolar-spinner-animation 2s infinite;\r\n}\r\n\r\n.semipolar-spinner .ring:nth-child(1) {\r\n  height: calc(40px - 40px * 0.2 * 0);\r\n  width: calc(40px - 40px * 0.2 * 0);\r\n  top: calc(40px * 0.1 * 0);\r\n  left: calc(40px * 0.1 * 0);\r\n  animation-delay: calc(2000ms * 0.1 * 4);\r\n  z-index: 5;\r\n}\r\n\r\n.semipolar-spinner .ring:nth-child(2) {\r\n  height: calc(40px - 40px * 0.2 * 1);\r\n  width: calc(40px - 40px * 0.2 * 1);\r\n  top: calc(40px * 0.1 * 1);\r\n  left: calc(40px * 0.1 * 1);\r\n  animation-delay: calc(2000ms * 0.1 * 3);\r\n  z-index: 4;\r\n}\r\n\r\n.semipolar-spinner .ring:nth-child(3) {\r\n  height: calc(40px - 40px * 0.2 * 2);\r\n  width: calc(40px - 40px * 0.2 * 2);\r\n  top: calc(40px * 0.1 * 2);\r\n  left: calc(40px * 0.1 * 2);\r\n  animation-delay: calc(2000ms * 0.1 * 2);\r\n  z-index: 3;\r\n}\r\n\r\n.semipolar-spinner .ring:nth-child(4) {\r\n  height: calc(40px - 40px * 0.2 * 3);\r\n  width: calc(40px - 40px * 0.2 * 3);\r\n  top: calc(40px * 0.1 * 3);\r\n  left: calc(40px * 0.1 * 3);\r\n  animation-delay: calc(2000ms * 0.1 * 1);\r\n  z-index: 2;\r\n}\r\n\r\n.semipolar-spinner .ring:nth-child(5) {\r\n  height: calc(40px - 40px * 0.2 * 4);\r\n  width: calc(40px - 40px * 0.2 * 4);\r\n  top: calc(40px * 0.1 * 4);\r\n  left: calc(40px * 0.1 * 4);\r\n  animation-delay: calc(2000ms * 0.1 * 0);\r\n  z-index: 1;\r\n}\r\n\r\n@keyframes semipolar-spinner-animation {\r\n  50% {\r\n    transform: rotate(360deg) scale(0.7);\r\n  }\r\n}\r\n",
        "timeFrom": "$refresh_trigger",
        "wrap": true
      },
      "pluginVersion": "5.7.0",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "queryType": "randomWalk",
          "refId": "A"
        }
      ],
      "title": "YouTube",
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 27
      },
      "id": 12,
      "panels": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "description": "Use this Format for each Line: </br>\n<a style=\"color: #ACDDDE;font-weight: 500;\">Channel1</a><br>\n<a style=\"color: #E1F8DC;font-weight: 500;\">Channel2</a><br>\n<a style=\"color: #FEF8DD;font-weight: 500;\">Channel3</a><br>\n<a style=\"color: #F7D8BA;font-weight: 500;\">Channel4</a><br>",
          "fieldConfig": {
            "defaults": {},
            "overrides": []
          },
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 0,
            "y": 29
          },
          "id": 15,
          "maxDataPoints": 1,
          "options": {
            "actions": {
              "reset": true,
              "submit": false,
              "update": true
            },
            "buttonGroup": {
              "orientation": "center",
              "size": "md"
            },
            "confirmModal": {
              "body": "Please confirm to update changed values",
              "cancel": "Cancel",
              "columns": {
                "include": [
                  "name",
                  "oldValue",
                  "newValue"
                ],
                "name": "Label",
                "newValue": "New Value",
                "oldValue": "Old Value"
              },
              "confirm": "Confirm",
              "elementDisplayMode": "modified",
              "title": "Confirm update request"
            },
            "defaultValues": true,
            "elementValueChanged": "",
            "elements": [
              {
                "disableIf": "",
                "id": "twitch_channels",
                "isEscaping": false,
                "name": "twitch_channels",
                "rows": 6,
                "settings": {
                  "label": "Twitch Channels",
                  "placeholder": "Enter Twitch channels, one per line",
                  "required": false,
                  "rows": 5,
                  "tooltip": "Enter Twitch channel names, one per line",
                  "width": "100%"
                },
                "showIf": "",
                "title": "",
                "type": "textarea",
                "uid": "2dabe11b-626b-48a4-8955-a4495e49755f"
              }
            ],
            "highlight": true,
            "highlightColor": "var(--primary-text-link-color)",
            "initial": {
              "code": "// Get the current value of the twitch_channels variable\r\nconst currentValue = context.grafana.templateService.replace(`${twitch_channels}`);\r\n\r\n// Set the value in the form element\r\nconst twitchChannelsElement = context.panel.elements.find(e => e.id === `twitch_channels`);\r\nif (twitchChannelsElement) {\r\n  twitchChannelsElement.value = currentValue;\r\n}\r\n\r\n// Return the data with the current value\r\nreturn {\r\n  data: {\r\n    twitch_channels: currentValue\r\n  },\r\n  status: 200\r\n};\r\n",
              "contentType": "application/json",
              "getPayload": "",
              "highlight": false,
              "highlightColor": "red",
              "method": "-",
              "payload": {}
            },
            "inputWidth": "70%",
            "labelWidth": "30%",
            "layout": {
              "autoSize": true,
              "orientation": "horizontal",
              "padding": 20,
              "sectionVariant": "default",
              "variant": "single"
            },
            "loadVariableValues": true,
            "reset": {
              "backgroundColor": "purple",
              "buttonIcon": "sync",
              "buttonSize": "sm",
              "buttonText": "Reset",
              "buttonVariant": "secondary",
              "foregroundColor": "yellow",
              "icon": "process",
              "text": "Reset",
              "variant": "hidden"
            },
            "resetAction": {
              "code": "",
              "confirm": false,
              "getPayload": "",
              "mode": "initial",
              "payload": {}
            },
            "saveDefault": {
              "icon": "save",
              "text": "Save Default",
              "variant": "hidden"
            },
            "server": {
              "errorMessage": "Failed to update Twitch channels",
              "method": "POST",
              "showError": true,
              "showSuccess": true,
              "successMessage": "Twitch channels updated successfully",
              "url": ""
            },
            "showErrors": true,
            "showSuccessMessage": true,
            "submit": {
              "backgroundColor": "#24523d73",
              "buttonIcon": "save",
              "buttonSize": "md",
              "buttonText": "Submit",
              "buttonVariant": "primary",
              "foregroundColor": "text",
              "icon": "check",
              "text": "Apply",
              "variant": "primary"
            },
            "successMessageText": "Twitch channels updated successfully!",
            "sync": true,
            "update": {
              "buttonIcon": "save",
              "buttonSize": "md",
              "buttonText": "Update Channels",
              "buttonVariant": "primary",
              "code": "// Get the value from the twitch channels textarea\nconst twitchChannelsValue = context.panel.elements.find(e => e.id === 'twitch_channels').value;\n\n// Update the dashboard variable for immediate use\ncontext.grafana.locationService.partial({\n  \"var-twitch_channels\": twitchChannelsValue,\n}, true);\n\n// Extract UID from current URL\nconst currentUrl = window.location.href;\nconst uidMatch = currentUrl.match(/\\/d\\/([^\\/]+)/);\nconst dashboardUid = uidMatch ? uidMatch[1] : null;\n\nif (!dashboardUid) {\n  context.grafana.notifyError('Cannot determine dashboard UID');\n  return {\n    data: {},\n    status: 400\n  };\n}\n\n// First, get the current dashboard JSON\nfetch(`/api/dashboards/uid/${dashboardUid}`)\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(`Failed to fetch dashboard: ${response.statusText}`);\n    }\n    return response.json();\n  })\n  .then(dashboardData => {\n    // Find the twitch_channels variable in the dashboard templating list\n    const templating = dashboardData.dashboard.templating || { list: [] };\n    const variable = templating.list.find(v => v.name === 'twitch_channels');\n\n    if (variable) {\n      // Update the variable's default value in the dashboard JSON\n      variable.query = twitchChannelsValue;\n      \n      // For current and options, use the original value\n      variable.current = { \n        text: twitchChannelsValue, \n        value: twitchChannelsValue, \n        selected: true \n      };\n      \n      // Make sure options includes our new value\n      if (!variable.options) {\n        variable.options = [];\n      }\n      \n      // Add our value as an option if it doesn't exist\n      const optionExists = variable.options.some(opt => opt.value === twitchChannelsValue);\n      if (!optionExists) {\n        variable.options = [\n          { text: twitchChannelsValue, value: twitchChannelsValue, selected: true },\n          ...variable.options.map(opt => ({ ...opt, selected: false }))\n        ];\n      } else {\n        // Update existing option\n        variable.options = variable.options.map(opt => ({\n          ...opt,\n          selected: opt.value === twitchChannelsValue\n        }));\n      }\n\n      // Save the updated dashboard back to Grafana\n      return fetch('/api/dashboards/db', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          dashboard: dashboardData.dashboard,\n          overwrite: true,\n          message: 'Updated Twitch channels default value'\n        })\n      });\n    } else {\n      throw new Error('Twitch channels variable not found in dashboard');\n    }\n  })\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(`Failed to save dashboard: ${response.statusText}`);\n    }\n    return response.json();\n  })\n  .then(result => {\n    if (result.status === 'success') {\n      // Refresh the dashboard after a short delay\n      setTimeout(() => {\n        context.grafana.refresh();\n      }, 500);\n    } else {\n      context.grafana.notifyError(`Failed to save Twitch channels: ${result.message}`);\n    }\n  })\n  .catch(error => {\n    console.error('Error saving dashboard:', error);\n    context.grafana.notifyError(`Failed to save Twitch channels: ${error.message}`);\n  });\n\nreturn {\n  data: {},\n  status: 200\n};\n",
              "confirm": false,
              "contentType": "application/json",
              "getPayload": "",
              "method": "-",
              "payload": {},
              "payloadMode": "all"
            },
            "updateEnabled": "auto",
            "updateOnBlur": false,
            "updateOnChange": false,
            "variable": "twitch_channels"
          },
          "pluginVersion": "5.1.0",
          "targets": [
            {
              "datasource": {
                "type": "datasource",
                "uid": "grafana"
              },
              "refId": "A"
            }
          ],
          "title": "Twitch Channels",
          "type": "volkovlabs-form-panel"
        },
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "description": "Use this Format for each Line: </br>\n<a style=\"color: #ACDDDE;font-weight: 500;\">Game1</a><br>\n<a style=\"color: #E1F8DC;font-weight: 500;\">Game2</a><br>\n<a style=\"color: #FEF8DD;font-weight: 500;\">Game3</a><br>\n<a style=\"color: #F7D8BA;font-weight: 500;\">Game4</a><br>",
          "fieldConfig": {
            "defaults": {},
            "overrides": []
          },
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 8,
            "y": 29
          },
          "id": 19,
          "maxDataPoints": 1,
          "options": {
            "actions": {
              "reset": true,
              "submit": false,
              "update": true
            },
            "buttonGroup": {
              "orientation": "center",
              "size": "md"
            },
            "confirmModal": {
              "body": "Please confirm to update changed values",
              "cancel": "Cancel",
              "columns": {
                "include": [
                  "name",
                  "oldValue",
                  "newValue"
                ],
                "name": "Label",
                "newValue": "New Value",
                "oldValue": "Old Value"
              },
              "confirm": "Confirm",
              "elementDisplayMode": "modified",
              "title": "Confirm update request"
            },
            "defaultValues": true,
            "elementValueChanged": "",
            "elements": [
              {
                "disableIf": "",
                "id": "toptwitch_blacklist",
                "isEscaping": false,
                "name": "twitch_channels",
                "rows": 6,
                "settings": {
                  "label": "Twitch Channels",
                  "placeholder": "Enter Twitch channels, one per line",
                  "required": false,
                  "rows": 5,
                  "tooltip": "Enter Twitch channel names, one per line",
                  "width": "100%"
                },
                "showIf": "",
                "title": "",
                "type": "textarea",
                "uid": "2dabe11b-626b-48a4-8955-a4495e49755f"
              }
            ],
            "highlight": true,
            "highlightColor": "var(--primary-text-link-color)",
            "initial": {
              "code": "// Get the current value of the variable\r\nconst currentValue = context.grafana.templateService.replace(`${toptwitch_blacklist}`);\r\n\r\n// Set the value in the form element\r\nconst topTwitchElement = context.panel.elements.find(e => e.id === `toptwitch_blacklist`);\r\nif (topTwitchElement) {\r\n  topTwitchElement.value = currentValue;\r\n}\r\n\r\n// Return the data with the current value\r\nreturn {\r\n  data: {\r\n    toptwitch_blacklist: currentValue\r\n  },\r\n  status: 200\r\n};\r\n",
              "contentType": "application/json",
              "getPayload": "",
              "highlight": false,
              "highlightColor": "red",
              "method": "-",
              "payload": {}
            },
            "inputWidth": "70%",
            "labelWidth": "30%",
            "layout": {
              "autoSize": true,
              "orientation": "horizontal",
              "padding": 20,
              "sectionVariant": "default",
              "variant": "single"
            },
            "loadVariableValues": true,
            "reset": {
              "backgroundColor": "purple",
              "buttonIcon": "sync",
              "buttonSize": "sm",
              "buttonText": "Reset",
              "buttonVariant": "secondary",
              "foregroundColor": "yellow",
              "icon": "process",
              "text": "Reset",
              "variant": "hidden"
            },
            "resetAction": {
              "code": "",
              "confirm": false,
              "getPayload": "",
              "mode": "initial",
              "payload": {}
            },
            "saveDefault": {
              "icon": "save",
              "text": "Save Default",
              "variant": "hidden"
            },
            "server": {
              "errorMessage": "Failed to update Twitch channels",
              "method": "POST",
              "showError": true,
              "showSuccess": true,
              "successMessage": "Twitch channels updated successfully",
              "url": ""
            },
            "showErrors": true,
            "showSuccessMessage": true,
            "submit": {
              "backgroundColor": "#24523d73",
              "buttonIcon": "save",
              "buttonSize": "md",
              "buttonText": "Submit",
              "buttonVariant": "primary",
              "foregroundColor": "text",
              "icon": "check",
              "text": "Apply",
              "variant": "primary"
            },
            "successMessageText": "Twitch channels updated successfully!",
            "sync": true,
            "update": {
              "buttonIcon": "save",
              "buttonSize": "md",
              "buttonText": "Update Channels",
              "buttonVariant": "primary",
              "code": "// Get the value from the textarea\nconst topTwitchValue = context.panel.elements.find(e => e.id === 'toptwitch_blacklist').value;\n\n// Update the dashboard variable for immediate use\ncontext.grafana.locationService.partial({\n  \"var-toptwitch_blacklist\": topTwitchValue,\n}, true);\n\n// Extract UID from current URL\nconst currentUrl = window.location.href;\nconst uidMatch = currentUrl.match(/\\/d\\/([^\\/]+)/);\nconst dashboardUid = uidMatch ? uidMatch[1] : null;\n\nif (!dashboardUid) {\n  context.grafana.notifyError('Cannot determine dashboard UID');\n  return {\n    data: {},\n    status: 400\n  };\n}\n\n// First, get the current dashboard JSON\nfetch(`/api/dashboards/uid/${dashboardUid}`)\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(`Failed to fetch dashboard: ${response.statusText}`);\n    }\n    return response.json();\n  })\n  .then(dashboardData => {\n    // Find the variable in the dashboard templating list\n    const templating = dashboardData.dashboard.templating || { list: [] };\n    const variable = templating.list.find(v => v.name === 'toptwitch_blacklist');\n\n    if (variable) {\n      // Update the variable's default value in the dashboard JSON\n      variable.query = topTwitchValue;\n\n      // For current and options, use the original value\n      variable.current = {\n        text: topTwitchValue,\n        value: topTwitchValue,\n        selected: true\n      };\n\n      // Make sure options includes our new value\n      if (!variable.options) {\n        variable.options = [];\n      }\n\n      // Add our value as an option if it doesn't exist\n      const optionExists = variable.options.some(opt => opt.value === topTwitchValue);\n      if (!optionExists) {\n        variable.options = [\n          { text: topTwitchValue, value: topTwitchValue, selected: true },\n          ...variable.options.map(opt => ({ ...opt, selected: false }))\n        ];\n      } else {\n        // Update existing option\n        variable.options = variable.options.map(opt => ({\n          ...opt,\n          selected: opt.value === topTwitchValue\n        }));\n      }\n\n      // Save the updated dashboard back to Grafana\n      return fetch('/api/dashboards/db', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          dashboard: dashboardData.dashboard,\n          overwrite: true,\n          message: 'Updated Top Twitch Blacklist default value'\n        })\n      });\n    } else {\n      throw new Error('Top Twitch Blacklist variable not found in dashboard');\n    }\n  })\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(`Failed to save dashboard: ${response.statusText}`);\n    }\n    return response.json();\n  })\n  .then(result => {\n    if (result.status === 'success') {\n\n      // Refresh the dashboard after a short delay\n      setTimeout(() => {\n        context.grafana.refresh();\n      }, 500);\n\n    } else {\n      context.grafana.notifyError(`Failed to save Blacklist: ${result.message}`);\n    }\n  })\n  .catch(error => {\n    console.error('Error saving dashboard:', error);\n    context.grafana.notifyError(`Failed to save Blacklist: ${error.message}`);\n  });\n\nreturn {\n  data: {},\n  status: 200\n};\n",
              "confirm": false,
              "contentType": "application/json",
              "getPayload": "",
              "method": "-",
              "payload": {},
              "payloadMode": "all"
            },
            "updateEnabled": "auto",
            "updateOnBlur": false,
            "updateOnChange": false,
            "variable": "twitch_channels"
          },
          "pluginVersion": "5.1.0",
          "targets": [
            {
              "datasource": {
                "type": "datasource",
                "uid": "grafana"
              },
              "refId": "A"
            }
          ],
          "title": "Twitch Top Games (Blacklist)",
          "type": "volkovlabs-form-panel"
        },
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "description": "Use this Format for each Line: </br>\n<a style=\"color: #ACDDDE;font-weight: 500;\">Sub1</a><br>\n<a style=\"color: #E1F8DC;font-weight: 500;\">Sub2</a><br>\n<a style=\"color: #FEF8DD;font-weight: 500;\">Sub3</a><br>\n<a style=\"color: #F7D8BA;font-weight: 500;\">Sub4</a><br>",
          "fieldConfig": {
            "defaults": {},
            "overrides": []
          },
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 16,
            "y": 29
          },
          "id": 16,
          "maxDataPoints": 1,
          "options": {
            "actions": {
              "reset": true,
              "submit": false,
              "update": true
            },
            "buttonGroup": {
              "orientation": "center",
              "size": "md"
            },
            "confirmModal": {
              "body": "Please confirm to update changed values",
              "cancel": "Cancel",
              "columns": {
                "include": [
                  "name",
                  "oldValue",
                  "newValue"
                ],
                "name": "Label",
                "newValue": "New Value",
                "oldValue": "Old Value"
              },
              "confirm": "Confirm",
              "elementDisplayMode": "modified",
              "title": "Confirm update request"
            },
            "defaultValues": true,
            "elementValueChanged": "",
            "elements": [
              {
                "disableIf": "",
                "id": "subreddits",
                "isEscaping": false,
                "name": "subreddits",
                "rows": 6,
                "settings": {
                  "label": "Subreddits",
                  "placeholder": "Enter subreddits, one per line",
                  "required": false,
                  "rows": 5,
                  "tooltip": "Enter subreddit names, one per line",
                  "width": "100%"
                },
                "showIf": "",
                "title": "",
                "type": "textarea",
                "uid": "2dabe11b-626b-48a4-8955-a4495e49755f"
              }
            ],
            "highlight": true,
            "highlightColor": "var(--primary-text-link-color)",
            "initial": {
              "code": "// Get the current value of the subreddits variable\r\nconst currentValue = context.grafana.templateService.replace(`${subreddits}`);\r\n\r\n// Set the value in the form element\r\nconst subredditsElement = context.panel.elements.find(e => e.id === `subreddits`);\r\nif (subredditsElement) {\r\n  subredditsElement.value = currentValue;\r\n}\r\n\r\n// Return the data with the current value\r\nreturn {\r\n  data: {\r\n    subreddits: currentValue\r\n  },\r\n  status: 200\r\n};\r\n",
              "contentType": "application/json",
              "getPayload": "",
              "highlight": false,
              "highlightColor": "red",
              "method": "-",
              "payload": {}
            },
            "inputWidth": "70%",
            "labelWidth": "30%",
            "layout": {
              "autoSize": true,
              "orientation": "horizontal",
              "padding": 20,
              "sectionVariant": "default",
              "variant": "single"
            },
            "loadVariableValues": true,
            "reset": {
              "backgroundColor": "purple",
              "buttonIcon": "sync",
              "buttonSize": "sm",
              "buttonText": "Reset",
              "buttonVariant": "secondary",
              "foregroundColor": "yellow",
              "icon": "process",
              "text": "Reset",
              "variant": "hidden"
            },
            "resetAction": {
              "code": "",
              "confirm": false,
              "getPayload": "",
              "mode": "initial",
              "payload": {}
            },
            "saveDefault": {
              "icon": "save",
              "text": "Save Default",
              "variant": "hidden"
            },
            "server": {
              "errorMessage": "Failed to update subreddits",
              "method": "POST",
              "showError": true,
              "showSuccess": true,
              "successMessage": "Subreddits updated successfully",
              "url": ""
            },
            "showErrors": true,
            "showSuccessMessage": true,
            "submit": {
              "backgroundColor": "purple",
              "buttonIcon": "save",
              "buttonSize": "md",
              "buttonText": "Submit",
              "buttonVariant": "primary",
              "foregroundColor": "yellow",
              "icon": "check",
              "text": "Apply",
              "variant": "primary"
            },
            "successMessageText": "Subreddits updated successfully!",
            "sync": true,
            "update": {
              "buttonIcon": "save",
              "buttonSize": "md",
              "buttonText": "Update Subreddits",
              "buttonVariant": "primary",
              "code": "// Get the value from the subreddits textarea\nconst subredditsValue = context.panel.elements.find(e => e.id === 'subreddits').value;\n\n// Update the dashboard variable for immediate use\ncontext.grafana.locationService.partial({\n  \"var-subreddits\": subredditsValue,\n}, true);\n\n// Extract UID from current URL\nconst currentUrl = window.location.href;\nconst uidMatch = currentUrl.match(/\\/d\\/([^\\/]+)/);\nconst dashboardUid = uidMatch ? uidMatch[1] : null;\n\nif (!dashboardUid) {\n  context.grafana.notifyError('Cannot determine dashboard UID');\n  return {\n    data: {},\n    status: 400\n  };\n}\n\n// First, get the current dashboard JSON\nfetch(`/api/dashboards/uid/${dashboardUid}`)\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(`Failed to fetch dashboard: ${response.statusText}`);\n    }\n    return response.json();\n  })\n  .then(dashboardData => {\n    // Find the subreddits variable in the dashboard templating list\n    const templating = dashboardData.dashboard.templating || { list: [] };\n    const variable = templating.list.find(v => v.name === 'subreddits');\n\n    if (variable) {\n      // Update the variable's default value in the dashboard JSON\n      variable.query = subredditsValue;\n      \n      // For current and options, use the original value\n      variable.current = { \n        text: subredditsValue, \n        value: subredditsValue, \n        selected: true \n      };\n      \n      // Make sure options includes our new value\n      if (!variable.options) {\n        variable.options = [];\n      }\n      \n      // Add our value as an option if it doesn't exist\n      const optionExists = variable.options.some(opt => opt.value === subredditsValue);\n      if (!optionExists) {\n        variable.options = [\n          { text: subredditsValue, value: subredditsValue, selected: true },\n          ...variable.options.map(opt => ({ ...opt, selected: false }))\n        ];\n      } else {\n        // Update existing option\n        variable.options = variable.options.map(opt => ({\n          ...opt,\n          selected: opt.value === subredditsValue\n        }));\n      }\n\n      // Save the updated dashboard back to Grafana\n      return fetch('/api/dashboards/db', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          dashboard: dashboardData.dashboard,\n          overwrite: true,\n          message: 'Updated subreddits default value'\n        })\n      });\n    } else {\n      throw new Error('Subreddits variable not found in dashboard');\n    }\n  })\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(`Failed to save dashboard: ${response.statusText}`);\n    }\n    return response.json();\n  })\n  .then(result => {\n    if (result.status === 'success') {\n      // Refresh the dashboard after a short delay\n      setTimeout(() => {\n        context.grafana.refresh();\n      }, 500);\n    } else {\n      context.grafana.notifyError(`Failed to save subreddits: ${result.message}`);\n    }\n  })\n  .catch(error => {\n    console.error('Error saving dashboard:', error);\n    context.grafana.notifyError(`Failed to save subreddits: ${error.message}`);\n  });\n\nreturn {\n  data: {},\n  status: 200\n};\n",
              "confirm": false,
              "contentType": "application/json",
              "getPayload": "",
              "method": "-",
              "payload": {},
              "payloadMode": "all"
            },
            "updateEnabled": "auto",
            "updateOnBlur": false,
            "updateOnChange": false,
            "variable": "subreddits"
          },
          "pluginVersion": "5.1.0",
          "targets": [
            {
              "datasource": {
                "type": "datasource",
                "uid": "grafana"
              },
              "refId": "A"
            }
          ],
          "title": "Subreddits",
          "type": "volkovlabs-form-panel"
        },
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "description": "Use this Format for each Line: \n<br>\n<a style=\"color: #ACDDDE;font-weight: 500;\">Label1</a>, \n<a style=\"color: #E1F8DC;font-weight: 500;\">URL1</a>, \n<a style=\"color: #FEF8DD;font-weight: 500;\">Icon1</a>, \n<a style=\"color: #F7D8BA;font-weight: 500;\">Icon Color1 </a>(optional)\n<br>\n<a style=\"color: #ACDDDE;font-weight: 500;\">Label2</a>, \n<a style=\"color: #E1F8DC;font-weight: 500;\">URL2</a>, \n<a style=\"color: #FEF8DD;font-weight: 500;\">Icon2</a>, \n<a style=\"color: #F7D8BA;font-weight: 500;\">Icon Color2 </a>(optional)\n<br>\n<a style=\"color: #ACDDDE;font-weight: 500;\">Label3</a>, \n<a style=\"color: #E1F8DC;font-weight: 500;\">URL3</a>, \n<a style=\"color: #FEF8DD;font-weight: 500;\">Icon3</a>, \n<a style=\"color: #F7D8BA;font-weight: 500;\">Icon Color3 </a>(optional)\n<br>",
          "fieldConfig": {
            "defaults": {},
            "overrides": []
          },
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 0,
            "y": 36
          },
          "id": 14,
          "maxDataPoints": 1,
          "options": {
            "actions": {
              "reset": true,
              "submit": false,
              "update": true
            },
            "buttonGroup": {
              "orientation": "center",
              "size": "md"
            },
            "confirmModal": {
              "body": "Please confirm to update changed values",
              "cancel": "Cancel",
              "columns": {
                "include": [
                  "name",
                  "oldValue",
                  "newValue"
                ],
                "name": "Label",
                "newValue": "New Value",
                "oldValue": "Old Value"
              },
              "confirm": "Confirm",
              "elementDisplayMode": "modified",
              "title": "Confirm update request"
            },
            "defaultValues": true,
            "elementValueChanged": "",
            "elements": [
              {
                "disableIf": "",
                "id": "bookmarks",
                "isEscaping": false,
                "name": "bookmarks",
                "rows": 6,
                "settings": {
                  "label": "Bookmarks",
                  "placeholder": "Enter bookmarks separated by + symbol",
                  "required": false,
                  "rows": 5,
                  "tooltip": "Enter bookmarks in format: value1+value2+value3",
                  "width": "100%"
                },
                "showIf": "",
                "title": "",
                "type": "textarea",
                "uid": "2dabe11b-626b-48a4-8955-a4495e49755f"
              }
            ],
            "highlight": true,
            "highlightColor": "var(--primary-text-link-color)",
            "initial": {
              "code": "// Get the current value of the bookmarks variable\r\nconst currentValue = context.grafana.templateService.replace(`${bookmarks}`);\r\n\r\n// Set the value in the form element\r\nconst bookmarksElement = context.panel.elements.find(e => e.id === `bookmarks`);\r\nif (bookmarksElement) {\r\n  bookmarksElement.value = currentValue;\r\n}\r\n\r\n// Return the data with the current value\r\nreturn {\r\n  data: {\r\n    bookmarks: currentValue\r\n  },\r\n  status: 200\r\n};\r\n",
              "contentType": "application/json",
              "getPayload": "",
              "highlight": false,
              "highlightColor": "red",
              "method": "-",
              "payload": {}
            },
            "inputWidth": "70%",
            "labelWidth": "30%",
            "layout": {
              "autoSize": true,
              "orientation": "horizontal",
              "padding": 20,
              "sectionVariant": "default",
              "sections": [],
              "variant": "single"
            },
            "loadVariableValues": true,
            "reset": {
              "backgroundColor": "purple",
              "buttonIcon": "sync",
              "buttonSize": "sm",
              "buttonText": "Reset",
              "buttonVariant": "secondary",
              "foregroundColor": "yellow",
              "icon": "process",
              "text": "Reset",
              "variant": "hidden"
            },
            "resetAction": {
              "code": "",
              "confirm": false,
              "getPayload": "",
              "mode": "initial",
              "payload": {}
            },
            "saveDefault": {
              "icon": "save",
              "text": "Save Default",
              "variant": "hidden"
            },
            "server": {
              "errorMessage": "Failed to update bookmarks",
              "method": "POST",
              "showError": true,
              "showSuccess": true,
              "successMessage": "Bookmarks updated successfully",
              "url": ""
            },
            "showErrors": true,
            "showSuccessMessage": true,
            "submit": {
              "backgroundColor": "purple",
              "buttonIcon": "save",
              "buttonSize": "md",
              "buttonText": "Submit",
              "buttonVariant": "primary",
              "foregroundColor": "yellow",
              "icon": "check",
              "text": "Apply",
              "variant": "primary"
            },
            "successMessageText": "Bookmarks updated successfully!",
            "sync": true,
            "update": {
              "buttonIcon": "save",
              "buttonSize": "md",
              "buttonText": "Update Bookmarks",
              "buttonVariant": "primary",
              "code": "// Get the value from the bookmarks textarea\nconst bookmarksValue = context.panel.elements.find(e => e.id === 'bookmarks').value;\n\n// Update the dashboard variable for immediate use (without encoding)\ncontext.grafana.locationService.partial({\n  \"var-bookmarks\": bookmarksValue,\n}, true);\n\n// Extract UID from current URL\nconst currentUrl = window.location.href;\nconst uidMatch = currentUrl.match(/\\/d\\/([^\\/]+)/);\nconst dashboardUid = uidMatch ? uidMatch[1] : null;\n\nif (!dashboardUid) {\n  context.grafana.notifyError('Error', 'Cannot determine dashboard UID');\n  return {\n    data: {},\n    status: 400\n  };\n}\n\n// First, get the current dashboard JSON\nfetch(`/api/dashboards/uid/${dashboardUid}`)\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(`Failed to fetch dashboard: ${response.statusText}`);\n    }\n    return response.json();\n  })\n  .then(dashboardData => {\n    // Find the bookmarks variable in the dashboard templating list\n    const templating = dashboardData.dashboard.templating || { list: [] };\n    const variable = templating.list.find(v => v.name === 'bookmarks');\n\n    if (variable) {\n      // Update the variable's default value in the dashboard JSON\n      // Keep the original format without encoding\n      variable.query = bookmarksValue;\n\n      // For current and options, also use the original value\n      variable.current = {\n        text: bookmarksValue,\n        value: bookmarksValue,\n        selected: true\n      };\n\n      // Make sure options includes our new value\n      if (!variable.options) {\n        variable.options = [];\n      }\n\n      // Add our value as an option if it doesn't exist\n      const optionExists = variable.options.some(opt => opt.value === bookmarksValue);\n      if (!optionExists) {\n        variable.options = [\n          { text: bookmarksValue, value: bookmarksValue, selected: true },\n          ...variable.options.map(opt => ({ ...opt, selected: false }))\n        ];\n      } else {\n        // Update existing option\n        variable.options = variable.options.map(opt => ({\n          ...opt,\n          selected: opt.value === bookmarksValue\n        }));\n      }\n\n      // Save the updated dashboard back to Grafana\n      return fetch('/api/dashboards/db', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          dashboard: dashboardData.dashboard,\n          overwrite: true,\n          message: 'Updated bookmarks default value'\n        })\n      });\n    } else {\n      throw new Error('Bookmarks variable not found in dashboard');\n    }\n  })\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(`Failed to save dashboard: ${response.statusText}`);\n    }\n    return response.json();\n  })\n  .then(result => {\n    if (result.status === 'success') {\n      // Refresh the dashboard after a short delay\n      setTimeout(() => {\n        context.grafana.refresh();\n      }, 500);\n    } else {\n      context.grafana.notifyError('Error', `Failed to save bookmarks: ${result.message}`);\n    }\n  })\n  .catch(error => {\n    console.error('Error saving dashboard:', error);\n    context.grafana.notifyError('Error', `Failed to save bookmarks: ${error.message}`);\n  });\n\nreturn {\n  data: {},\n  status: 200\n};\n",
              "confirm": false,
              "contentType": "application/json",
              "getPayload": "",
              "method": "-",
              "payload": {},
              "payloadMode": "all"
            },
            "updateEnabled": "auto",
            "updateOnBlur": false,
            "updateOnChange": false,
            "variable": "bookmarks"
          },
          "pluginVersion": "5.1.0",
          "targets": [
            {
              "datasource": {
                "type": "datasource",
                "uid": "grafana"
              },
              "refId": "A"
            }
          ],
          "title": "Bookmarks",
          "type": "volkovlabs-form-panel"
        },
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "description": "Use this format for each line: </br>\n<a style=\"color: #FF0000;font-weight: 500;\">UCBJycsmduvYEL83R_U4JriQ</a> (MKBHD)<br>\n<a style=\"color: #4285F4;font-weight: 500;\">UC-lHJZR3Gqxm24_Vd_AJ5Yw</a> (PewDiePie)<br>\n<a style=\"color: #EA4335;font-weight: 500;\">UCIRYBXDze5krPDzAEOxFGVA</a> (TechLinked)<br>\n<a style=\"color: #FBBC05;font-weight: 500;\">UCSHZKyawb77ixDdsGog4iWA</a> (Lex Fridman)<br>",
          "fieldConfig": {
            "defaults": {},
            "overrides": []
          },
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 8,
            "y": 36
          },
          "id": 23,
          "maxDataPoints": 1,
          "options": {
            "actions": {
              "reset": true,
              "submit": false,
              "update": true
            },
            "buttonGroup": {
              "orientation": "center",
              "size": "md"
            },
            "confirmModal": {
              "body": "Please confirm to update YouTube channels",
              "cancel": "Cancel",
              "columns": {
                "include": [
                  "name",
                  "oldValue",
                  "newValue"
                ],
                "name": "Label",
                "newValue": "New Value",
                "oldValue": "Old Value"
              },
              "confirm": "Confirm",
              "elementDisplayMode": "modified",
              "title": "Confirm update request"
            },
            "defaultValues": true,
            "elementValueChanged": "",
            "elements": [
              {
                "disableIf": "",
                "id": "youtube_channels",
                "isEscaping": false,
                "name": "youtube_channels",
                "rows": 6,
                "settings": {
                  "label": "YouTube Channel IDs",
                  "placeholder": "Enter YouTube channel IDs, one per line",
                  "required": false,
                  "rows": 8,
                  "tooltip": "Enter YouTube channel IDs (NOT usernames), one per line. You can add optional descriptions in parentheses.",
                  "width": "100%"
                },
                "showIf": "",
                "title": "",
                "type": "textarea",
                "uid": "9ae61f5b-a24c-47d2-b189-c72e48e9b7fc"
              }
            ],
            "highlight": true,
            "highlightColor": "var(--primary-text-link-color)",
            "initial": {
              "code": "// Get the current value of the youtube_channels variable\r\nconst currentValue = context.grafana.templateService.replace(`${youtube_channels}`);\r\n\r\n// Set the value in the form element\r\nconst channelsElement = context.panel.elements.find(e => e.id === `youtube_channels`);\r\nif (channelsElement) {\r\n  channelsElement.value = currentValue;\r\n}\r\n\r\n// Return the data with the current value\r\nreturn {\r\n  data: {\r\n    youtube_channels: currentValue\r\n  },\r\n  status: 200\r\n};\r\n",
              "contentType": "application/json",
              "getPayload": "",
              "highlight": false,
              "highlightColor": "red",
              "method": "-",
              "payload": {}
            },
            "inputWidth": "70%",
            "labelWidth": "30%",
            "layout": {
              "autoSize": true,
              "orientation": "horizontal",
              "padding": 20,
              "sectionVariant": "default",
              "variant": "single"
            },
            "loadVariableValues": true,
            "reset": {
              "backgroundColor": "purple",
              "buttonIcon": "sync",
              "buttonSize": "sm",
              "buttonText": "Reset",
              "buttonVariant": "secondary",
              "foregroundColor": "yellow",
              "icon": "process",
              "text": "Reset",
              "variant": "hidden"
            },
            "resetAction": {
              "code": "",
              "confirm": false,
              "getPayload": "",
              "mode": "initial",
              "payload": {}
            },
            "saveDefault": {
              "icon": "save",
              "text": "Save Default",
              "variant": "hidden"
            },
            "server": {
              "errorMessage": "Failed to update YouTube channels",
              "method": "POST",
              "showError": true,
              "showSuccess": true,
              "successMessage": "YouTube channels updated successfully",
              "url": ""
            },
            "showErrors": true,
            "showSuccessMessage": true,
            "submit": {
              "backgroundColor": "purple",
              "buttonIcon": "save",
              "buttonSize": "md",
              "buttonText": "Submit",
              "buttonVariant": "primary",
              "foregroundColor": "yellow",
              "icon": "check",
              "text": "Apply",
              "variant": "primary"
            },
            "successMessageText": "YouTube channels updated successfully!",
            "sync": true,
            "update": {
              "buttonIcon": "save",
              "buttonSize": "md",
              "buttonText": "Update Channels",
              "buttonVariant": "primary",
              "code": "// Get the value from the youtube_channels textarea\nconst channelsValue = context.panel.elements.find(e => e.id === 'youtube_channels').value;\n\n// Update the dashboard variable for immediate use\ncontext.grafana.locationService.partial({\n  \"var-youtube_channels\": channelsValue,\n}, true);\n\n// Extract UID from current URL\nconst currentUrl = window.location.href;\nconst uidMatch = currentUrl.match(/\\/d\\/([^\\/]+)/);\nconst dashboardUid = uidMatch ? uidMatch[1] : null;\n\nif (!dashboardUid) {\n  context.grafana.notifyError('Cannot determine dashboard UID');\n  return {\n    data: {},\n    status: 400\n  };\n}\n\n// First, get the current dashboard JSON\nfetch(`/api/dashboards/uid/${dashboardUid}`)\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(`Failed to fetch dashboard: ${response.statusText}`);\n    }\n    return response.json();\n  })\n  .then(dashboardData => {\n    // Find the youtube_channels variable in the dashboard templating list\n    const templating = dashboardData.dashboard.templating || { list: [] };\n    const variable = templating.list.find(v => v.name === 'youtube_channels');\n\n    if (variable) {\n      // Update the variable's default value in the dashboard JSON\n      variable.query = channelsValue;\n      \n      // For current and options, use the original value\n      variable.current = { \n        text: channelsValue, \n        value: channelsValue, \n        selected: true \n      };\n      \n      // Make sure options includes our new value\n      if (!variable.options) {\n        variable.options = [];\n      }\n      \n      // Add our value as an option if it doesn't exist\n      const optionExists = variable.options.some(opt => opt.value === channelsValue);\n      if (!optionExists) {\n        variable.options = [\n          { text: channelsValue, value: channelsValue, selected: true },\n          ...variable.options.map(opt => ({ ...opt, selected: false }))\n        ];\n      } else {\n        // Update existing option\n        variable.options = variable.options.map(opt => ({\n          ...opt,\n          selected: opt.value === channelsValue\n        }));\n      }\n\n      // Save the updated dashboard back to Grafana\n      return fetch('/api/dashboards/db', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          dashboard: dashboardData.dashboard,\n          overwrite: true,\n          message: 'Updated YouTube channels default value'\n        })\n      });\n    } else {\n      throw new Error('YouTube channels variable not found in dashboard');\n    }\n  })\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(`Failed to save dashboard: ${response.statusText}`);\n    }\n    return response.json();\n  })\n  .then(result => {\n    if (result.status === 'success') {\n      // Refresh the dashboard after a short delay to see updated videos\n      setTimeout(() => {\n        context.grafana.refresh();\n      }, 500);\n    } else {\n      context.grafana.notifyError(`Failed to save YouTube channels: ${result.message}`);\n    }\n  })\n  .catch(error => {\n    console.error('Error saving dashboard:', error);\n    context.grafana.notifyError(`Failed to save YouTube channels: ${error.message}`);\n  });\n\nreturn {\n  data: {},\n  status: 200\n};\n",
              "confirm": false,
              "contentType": "application/json",
              "getPayload": "",
              "method": "-",
              "payload": {},
              "payloadMode": "all"
            },
            "updateEnabled": "auto",
            "updateOnBlur": false,
            "updateOnChange": false,
            "variable": "youtube_channels"
          },
          "pluginVersion": "5.1.0",
          "targets": [
            {
              "datasource": {
                "type": "datasource",
                "uid": "grafana"
              },
              "refId": "A"
            }
          ],
          "title": "YouTube Channels",
          "type": "volkovlabs-form-panel"
        },
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "description": "Use this format for each line: </br>\n<a style=\"color: #58a6ff;font-weight: 500;\">it-baer/nc-iframewidget</a> (NC iFrame Widget)<br>\n<a style=\"color: #3fb950;font-weight: 500;\">grafana/grafana</a> (Grafana)<br>\n<a style=\"color: #f85149;font-weight: 500;\">hashicorp/terraform</a> (Terraform)<br>",
          "fieldConfig": {
            "defaults": {},
            "overrides": []
          },
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 16,
            "y": 36
          },
          "id": 25,
          "maxDataPoints": 1,
          "options": {
            "actions": {
              "reset": true,
              "submit": false,
              "update": true
            },
            "buttonGroup": {
              "orientation": "center",
              "size": "md"
            },
            "confirmModal": {
              "body": "Please confirm to update GitHub repositories",
              "cancel": "Cancel",
              "columns": {
                "include": [
                  "name",
                  "oldValue",
                  "newValue"
                ],
                "name": "Label",
                "newValue": "New Value",
                "oldValue": "Old Value"
              },
              "confirm": "Confirm",
              "elementDisplayMode": "modified",
              "title": "Confirm update request"
            },
            "defaultValues": true,
            "elementValueChanged": "",
            "elements": [
              {
                "disableIf": "",
                "id": "github_repos",
                "isEscaping": false,
                "name": "github_repos",
                "rows": 6,
                "settings": {
                  "label": "GitHub Repository Names",
                  "placeholder": "Enter GitHub repository names, one per line",
                  "required": false,
                  "rows": 8,
                  "tooltip": "Enter repository names in the format 'owner/repo', one per line. For example: 'grafana/grafana'",
                  "width": "100%"
                },
                "showIf": "",
                "title": "",
                "type": "textarea",
                "uid": "9ae61f5b-a24c-47d2-b189-c72e48e9b7fc"
              }
            ],
            "highlight": true,
            "highlightColor": "var(--primary-text-link-color)",
            "initial": {
              "code": "// Get the current value of the github_repos variable\r\nconst currentValue = context.grafana.templateService.replace(`${github_repos}`);\r\n\r\n// Set the value in the form element\r\nconst reposElement = context.panel.elements.find(e => e.id === `github_repos`);\r\nif (reposElement) {\r\n  reposElement.value = currentValue;\r\n}\r\n\r\n// Return the data with the current value\r\nreturn {\r\n  data: {\r\n    github_repos: currentValue\r\n  },\r\n  status: 200\r\n};\r\n",
              "contentType": "application/json",
              "getPayload": "",
              "highlight": false,
              "highlightColor": "red",
              "method": "-",
              "payload": {}
            },
            "inputWidth": "70%",
            "labelWidth": "30%",
            "layout": {
              "autoSize": true,
              "orientation": "horizontal",
              "padding": 20,
              "sectionVariant": "default",
              "variant": "single"
            },
            "loadVariableValues": true,
            "reset": {
              "backgroundColor": "purple",
              "buttonIcon": "sync",
              "buttonSize": "sm",
              "buttonText": "Reset",
              "buttonVariant": "secondary",
              "foregroundColor": "yellow",
              "icon": "process",
              "text": "Reset",
              "variant": "hidden"
            },
            "resetAction": {
              "code": "",
              "confirm": false,
              "getPayload": "",
              "mode": "initial",
              "payload": {}
            },
            "saveDefault": {
              "icon": "save",
              "text": "Save Default",
              "variant": "hidden"
            },
            "server": {
              "errorMessage": "Failed to update GitHub repositories",
              "method": "POST",
              "showError": true,
              "showSuccess": true,
              "successMessage": "GitHub repositories updated successfully",
              "url": ""
            },
            "showErrors": true,
            "showSuccessMessage": true,
            "submit": {
              "backgroundColor": "purple",
              "buttonIcon": "save",
              "buttonSize": "md",
              "buttonText": "Submit",
              "buttonVariant": "primary",
              "foregroundColor": "yellow",
              "icon": "check",
              "text": "Apply",
              "variant": "primary"
            },
            "successMessageText": "GitHub repositories updated successfully!",
            "sync": true,
            "update": {
              "buttonIcon": "save",
              "buttonSize": "md",
              "buttonText": "Update Repositories",
              "buttonVariant": "primary",
              "code": "// Get the value from the github_repos textarea\nconst reposValue = context.panel.elements.find(e => e.id === 'github_repos').value;\n\n// Update the dashboard variable for immediate use\ncontext.grafana.locationService.partial({\n  \"var-github_repos\": reposValue,\n}, true);\n\n// Extract UID from current URL\nconst currentUrl = window.location.href;\nconst uidMatch = currentUrl.match(/\\/d\\/([^\\/]+)/);\nconst dashboardUid = uidMatch ? uidMatch[1] : null;\n\nif (!dashboardUid) {\n  context.grafana.notifyError('Cannot determine dashboard UID');\n  return {\n    data: {},\n    status: 400\n  };\n}\n\n// First, get the current dashboard JSON\nfetch(`/api/dashboards/uid/${dashboardUid}`)\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(`Failed to fetch dashboard: ${response.statusText}`);\n    }\n    return response.json();\n  })\n  .then(dashboardData => {\n    // Find the github_repos variable in the dashboard templating list\n    const templating = dashboardData.dashboard.templating || { list: [] };\n    const variable = templating.list.find(v => v.name === 'github_repos');\n\n    if (variable) {\n      // Update the variable's default value in the dashboard JSON\n      variable.query = reposValue;\n      \n      // For current and options, use the original value\n      variable.current = { \n        text: reposValue, \n        value: reposValue, \n        selected: true \n      };\n      \n      // Make sure options includes our new value\n      if (!variable.options) {\n        variable.options = [];\n      }\n      \n      // Add our value as an option if it doesn't exist\n      const optionExists = variable.options.some(opt => opt.value === reposValue);\n      if (!optionExists) {\n        variable.options = [\n          { text: reposValue, value: reposValue, selected: true },\n          ...variable.options.map(opt => ({ ...opt, selected: false }))\n        ];\n      } else {\n        // Update existing option\n        variable.options = variable.options.map(opt => ({\n          ...opt,\n          selected: opt.value === reposValue\n        }));\n      }\n\n      // Save the updated dashboard back to Grafana\n      return fetch('/api/dashboards/db', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          dashboard: dashboardData.dashboard,\n          overwrite: true,\n          message: 'Updated GitHub repositories default value'\n        })\n      });\n    } else {\n      throw new Error('GitHub repos variable not found in dashboard');\n    }\n  })\n  .then(response => {\n    if (!response.ok) {\n      throw new Error(`Failed to save dashboard: ${response.statusText}`);\n    }\n    return response.json();\n  })\n  .then(result => {\n    if (result.status === 'success') {\n      // Refresh the dashboard after a short delay to see updated releases\n      setTimeout(() => {\n        context.grafana.refresh();\n      }, 500);\n    } else {\n      context.grafana.notifyError(`Failed to save GitHub repositories: ${result.message}`);\n    }\n  })\n  .catch(error => {\n    console.error('Error saving dashboard:', error);\n    context.grafana.notifyError(`Failed to save GitHub repositories: ${error.message}`);\n  });\n\nreturn {\n  data: {},\n  status: 200\n};\n",
              "confirm": false,
              "contentType": "application/json",
              "getPayload": "",
              "method": "-",
              "payload": {},
              "payloadMode": "all"
            },
            "updateEnabled": "auto",
            "updateOnBlur": false,
            "updateOnChange": false,
            "variable": "github_repos"
          },
          "pluginVersion": "5.1.0",
          "targets": [
            {
              "datasource": {
                "type": "datasource",
                "uid": "grafana"
              },
              "refId": "A"
            }
          ],
          "title": "GitHub Repositories",
          "type": "volkovlabs-form-panel"
        },
        {
          "datasource": {
            "type": "datasource",
            "uid": "grafana"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {},
            "overrides": []
          },
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 8,
            "y": 43
          },
          "id": 17,
          "maxDataPoints": 1,
          "options": {
            "actions": {
              "reset": true,
              "submit": false,
              "update": true
            },
            "buttonGroup": {
              "orientation": "center",
              "size": "md"
            },
            "confirmModal": {
              "body": "Please confirm to update changed values",
              "cancel": "Cancel",
              "columns": {
                "include": [
                  "name",
                  "oldValue",
                  "newValue"
                ],
                "name": "Label",
                "newValue": "New Value",
                "oldValue": "Old Value"
              },
              "confirm": "Confirm",
              "elementDisplayMode": "modified",
              "title": "Confirm update request"
            },
            "defaultValues": true,
            "elementValueChanged": "// Check if the dashboard is refreshing\r\nif (context.event === 'dashboard-refresh' || context.event === 'timerange-change') {\r\n  // Get current value of subreddits variable\r\n  const currentValue = context.grafana.templateService.replace('${subreddits}');\r\n\r\n  // Format and update\r\n  const formattedValue = currentValue.replace(/\\r?\\n/g, '+');\r\n  context.grafana.locationService.partial({\r\n    \"var-subreddits_formatted\": formattedValue,\r\n  }, true);\r\n}",
            "elements": [
              {
                "disableIf": "",
                "id": "subreddits",
                "isEscaping": false,
                "name": "bookmarks",
                "rows": 6,
                "settings": {
                  "label": "Bookmarks",
                  "placeholder": "Enter bookmarks separated by + symbol",
                  "required": false,
                  "rows": 5,
                  "tooltip": "Enter bookmarks in format: value1+value2+value3",
                  "width": "100%"
                },
                "showIf": "",
                "title": "",
                "type": "textarea",
                "uid": "2dabe11b-626b-48a4-8955-a4495e49755f"
              }
            ],
            "highlight": true,
            "highlightColor": "var(--primary-text-link-color)",
            "initial": {
              "code": "// Get the current value of the subreddits variable\r\nconst currentValue = context.grafana.templateService.replace(`${subreddits}`);\r\n\r\n// Set the value in the form element\r\nconst subredditsElement = context.panel.elements.find(e => e.id === `subreddits`);\r\nif (subredditsElement) {\r\n  subredditsElement.value = currentValue;\r\n}\r\n\r\n// Format the value and update the formatted variable\r\nconst formattedValue = currentValue.replace(/\\r?\\n/g, '+');\r\ncontext.grafana.locationService.partial({\r\n  \"var-subreddits_formatted\": formattedValue,\r\n}, true);\r\n\r\n// Return the data with the current value\r\nreturn {\r\n  data: {\r\n    subreddits: currentValue\r\n  },\r\n  status: 200\r\n};\r\n",
              "contentType": "application/json",
              "getPayload": "",
              "highlight": false,
              "highlightColor": "red",
              "method": "-",
              "payload": {}
            },
            "inputWidth": "70%",
            "labelWidth": "30%",
            "layout": {
              "autoSize": true,
              "orientation": "horizontal",
              "padding": 20,
              "sectionVariant": "default",
              "variant": "single"
            },
            "loadVariableValues": true,
            "reset": {
              "backgroundColor": "purple",
              "buttonIcon": "sync",
              "buttonSize": "sm",
              "buttonText": "Reset",
              "buttonVariant": "secondary",
              "foregroundColor": "yellow",
              "icon": "process",
              "text": "Reset",
              "variant": "hidden"
            },
            "resetAction": {
              "code": "",
              "confirm": false,
              "getPayload": "",
              "mode": "initial",
              "payload": {}
            },
            "saveDefault": {
              "icon": "save",
              "text": "Save Default",
              "variant": "hidden"
            },
            "server": {
              "errorMessage": "Failed to update bookmarks",
              "method": "POST",
              "showError": true,
              "showSuccess": true,
              "successMessage": "Bookmarks updated successfully",
              "url": ""
            },
            "showErrors": true,
            "showSuccessMessage": true,
            "submit": {
              "backgroundColor": "purple",
              "buttonIcon": "save",
              "buttonSize": "md",
              "buttonText": "Submit",
              "buttonVariant": "primary",
              "foregroundColor": "yellow",
              "icon": "check",
              "text": "Apply",
              "variant": "primary"
            },
            "successMessageText": "Bookmarks updated successfully!",
            "sync": true,
            "update": {
              "buttonIcon": "save",
              "buttonSize": "md",
              "buttonText": "Update Bookmarks",
              "buttonVariant": "primary",
              "code": "// Get the value from the subreddits textarea\nconst subredditsValue = context.panel.elements.find(e => e.id === 'subreddits').value;\nconst formattedValue = subredditsValue.replace(/\\r?\\n/g, '+');\n\n// Update the dashboard variable using locationService.partial\ncontext.grafana.locationService.partial({\n  \"var-subreddits_formatted\": formattedValue,\n}, true);\n\n// Return success\nreturn {\n  data: {},\n  status: 200\n};\n",
              "confirm": false,
              "contentType": "application/json",
              "getPayload": "",
              "method": "-",
              "payload": {},
              "payloadMode": "all"
            },
            "updateEnabled": "auto",
            "updateOnBlur": false,
            "updateOnChange": false,
            "variable": "bookmarks"
          },
          "pluginVersion": "5.1.0",
          "targets": [
            {
              "datasource": {
                "type": "datasource",
                "uid": "grafana"
              },
              "refId": "A"
            }
          ],
          "title": "Subreddits_formatted",
          "type": "volkovlabs-form-panel"
        }
      ],
      "title": "Config",
      "type": "row"
    }
  ],
  "refresh": "5m",
  "schemaVersion": 41,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "text": "selfhosted\nhomelab\nsysadmin",
          "value": "selfhosted\nhomelab\nsysadmin"
        },
        "hide": 2,
        "label": "Subreddits",
        "name": "subreddits",
        "options": [
          {
            "selected": true,
            "text": "selfhosted\nhomelab\nsysadmin",
            "value": "selfhosted\nhomelab\nsysadmin"
          }
        ],
        "query": "selfhosted\nhomelab\nsysadmin",
        "type": "textbox"
      },
      {
        "current": {
          "text": "christitustech\nrpicloud\nzackrawrr\nruetoo",
          "value": "christitustech\nrpicloud\nzackrawrr\nruetoo"
        },
        "hide": 2,
        "label": "Twitch Channels",
        "name": "twitch_channels",
        "options": [
          {
            "selected": true,
            "text": "christitustech\nrpicloud\nzackrawrr\nruetoo",
            "value": "christitustech\nrpicloud\nzackrawrr\nruetoo"
          }
        ],
        "query": "christitustech\nrpicloud\nzackrawrr\nruetoo",
        "type": "textbox"
      },
      {
        "current": {
          "text": "Reddit, https://reddit.com, reddit\nYoutube, https://youtube.com, youtube\nHome Assistant, https://www.home-assistant.io/, homeassistant\nNextcloud, https://nextcloud.com, nextcloud\nTwitch, https://twitch.tv, twitch\nUdemy, https://udemy.com, udemy\nGithub,https://github.com, github, grey",
          "value": "Reddit, https://reddit.com, reddit\nYoutube, https://youtube.com, youtube\nHome Assistant, https://www.home-assistant.io/, homeassistant\nNextcloud, https://nextcloud.com, nextcloud\nTwitch, https://twitch.tv, twitch\nUdemy, https://udemy.com, udemy\nGithub,https://github.com, github, grey"
        },
        "hide": 2,
        "name": "bookmarks",
        "options": [
          {
            "selected": true,
            "text": "Reddit, https://reddit.com, reddit\nYoutube, https://youtube.com, youtube\nHome Assistant, https://www.home-assistant.io/, homeassistant\nNextcloud, https://nextcloud.com, nextcloud\nTwitch, https://twitch.tv, twitch\nUdemy, https://udemy.com, udemy\nGithub,https://github.com, github, grey",
            "value": "Reddit, https://reddit.com, reddit\nYoutube, https://youtube.com, youtube\nHome Assistant, https://www.home-assistant.io/, homeassistant\nNextcloud, https://nextcloud.com, nextcloud\nTwitch, https://twitch.tv, twitch\nUdemy, https://udemy.com, udemy\nGithub,https://github.com, github, grey"
          }
        ],
        "query": "Reddit, https://reddit.com, reddit\nYoutube, https://youtube.com, youtube\nHome Assistant, https://www.home-assistant.io/, homeassistant\nNextcloud, https://nextcloud.com, nextcloud\nTwitch, https://twitch.tv, twitch\nUdemy, https://udemy.com, udemy\nGithub,https://github.com, github, grey",
        "type": "textbox"
      },
      {
        "current": {
          "text": "selfhosted+homelab+sysadmin",
          "value": "selfhosted+homelab+sysadmin"
        },
        "hide": 2,
        "name": "subreddits_formatted",
        "options": [
          {
            "selected": true,
            "text": "selfhosted+homelab+sysadmin",
            "value": "selfhosted+homelab+sysadmin"
          }
        ],
        "query": "selfhosted+homelab+sysadmin",
        "type": "textbox"
      },
      {
        "current": {
          "text": "ASMR\nJust Chatting\nFortnite\nIRL\nArt\nMusic",
          "value": "ASMR\nJust Chatting\nFortnite\nIRL\nArt\nMusic"
        },
        "hide": 2,
        "name": "toptwitch_blacklist",
        "options": [
          {
            "selected": true,
            "text": "ASMR\nJust Chatting\nFortnite\nIRL\nArt\nMusic",
            "value": "ASMR\nJust Chatting\nFortnite\nIRL\nArt\nMusic"
          }
        ],
        "query": "ASMR\nJust Chatting\nFortnite\nIRL\nArt\nMusic",
        "type": "textbox"
      },
      {
        "current": {
          "text": "",
          "value": ""
        },
        "hide": 2,
        "name": "searchQuery",
        "options": [
          {
            "selected": true,
            "text": "",
            "value": ""
          }
        ],
        "query": "",
        "type": "textbox"
      },
      {
        "current": {
          "text": "UCR-DXc1voovS8nhAvccRZhg\nUCsBjURrPoezykLs9EqgamOA\nUC_76XFUys5fTO7u_HqrD7aA\nUCg6gPGh8HU2U01vaFCAsvmQ\nUCvdHQkQv8KpwMnKkitmUVTQ\nUC9x0AN7BWHpCDHSm9NiJFJQ\nUCOuGATIAbd2DvzJmUgXn2IQ\nUCtYrkz2h30mePhXA9L7RUzg\nUCtG-mJIfI5Kq5wp4X1RQOXg\nUCA7X5unt1JrIiVReQDUbl_A\nUCKGe7fZ_S788Jaspxg-_5Sg\nUCG8gozAhzORUdfEQMuz_HjQ\nUCjSEJkpGbcZhvo0lr-44X_w\nUCOk-gHyjcWZNj3Br4oxwh0A",
          "value": "UCR-DXc1voovS8nhAvccRZhg\nUCsBjURrPoezykLs9EqgamOA\nUC_76XFUys5fTO7u_HqrD7aA\nUCg6gPGh8HU2U01vaFCAsvmQ\nUCvdHQkQv8KpwMnKkitmUVTQ\nUC9x0AN7BWHpCDHSm9NiJFJQ\nUCOuGATIAbd2DvzJmUgXn2IQ\nUCtYrkz2h30mePhXA9L7RUzg\nUCtG-mJIfI5Kq5wp4X1RQOXg\nUCA7X5unt1JrIiVReQDUbl_A\nUCKGe7fZ_S788Jaspxg-_5Sg\nUCG8gozAhzORUdfEQMuz_HjQ\nUCjSEJkpGbcZhvo0lr-44X_w\nUCOk-gHyjcWZNj3Br4oxwh0A"
        },
        "hide": 2,
        "name": "youtube_channels",
        "options": [
          {
            "selected": true,
            "text": "UCR-DXc1voovS8nhAvccRZhg\nUCsBjURrPoezykLs9EqgamOA\nUC_76XFUys5fTO7u_HqrD7aA\nUCg6gPGh8HU2U01vaFCAsvmQ\nUCvdHQkQv8KpwMnKkitmUVTQ\nUC9x0AN7BWHpCDHSm9NiJFJQ\nUCOuGATIAbd2DvzJmUgXn2IQ\nUCtYrkz2h30mePhXA9L7RUzg\nUCtG-mJIfI5Kq5wp4X1RQOXg\nUCA7X5unt1JrIiVReQDUbl_A\nUCKGe7fZ_S788Jaspxg-_5Sg\nUCG8gozAhzORUdfEQMuz_HjQ\nUCjSEJkpGbcZhvo0lr-44X_w\nUCOk-gHyjcWZNj3Br4oxwh0A",
            "value": "UCR-DXc1voovS8nhAvccRZhg\nUCsBjURrPoezykLs9EqgamOA\nUC_76XFUys5fTO7u_HqrD7aA\nUCg6gPGh8HU2U01vaFCAsvmQ\nUCvdHQkQv8KpwMnKkitmUVTQ\nUC9x0AN7BWHpCDHSm9NiJFJQ\nUCOuGATIAbd2DvzJmUgXn2IQ\nUCtYrkz2h30mePhXA9L7RUzg\nUCtG-mJIfI5Kq5wp4X1RQOXg\nUCA7X5unt1JrIiVReQDUbl_A\nUCKGe7fZ_S788Jaspxg-_5Sg\nUCG8gozAhzORUdfEQMuz_HjQ\nUCjSEJkpGbcZhvo0lr-44X_w\nUCOk-gHyjcWZNj3Br4oxwh0A"
          }
        ],
        "query": "UCR-DXc1voovS8nhAvccRZhg\nUCsBjURrPoezykLs9EqgamOA\nUC_76XFUys5fTO7u_HqrD7aA\nUCg6gPGh8HU2U01vaFCAsvmQ\nUCvdHQkQv8KpwMnKkitmUVTQ\nUC9x0AN7BWHpCDHSm9NiJFJQ\nUCOuGATIAbd2DvzJmUgXn2IQ\nUCtYrkz2h30mePhXA9L7RUzg\nUCtG-mJIfI5Kq5wp4X1RQOXg\nUCA7X5unt1JrIiVReQDUbl_A\nUCKGe7fZ_S788Jaspxg-_5Sg\nUCG8gozAhzORUdfEQMuz_HjQ\nUCjSEJkpGbcZhvo0lr-44X_w\nUCOk-gHyjcWZNj3Br4oxwh0A",
        "type": "textbox"
      },
      {
        "current": {
          "text": "it-baer/nc-iframewidget\ngo-gitea/gitea\ngrafana/grafana",
          "value": "it-baer/nc-iframewidget\ngo-gitea/gitea\ngrafana/grafana"
        },
        "hide": 2,
        "name": "github_repos",
        "options": [
          {
            "selected": true,
            "text": "it-baer/nc-iframewidget\ngo-gitea/gitea\ngrafana/grafana",
            "value": "it-baer/nc-iframewidget\ngo-gitea/gitea\ngrafana/grafana"
          }
        ],
        "query": "it-baer/nc-iframewidget\ngo-gitea/gitea\ngrafana/grafana",
        "type": "textbox"
      }
    ]
  },
  "time": {
    "from": "now-24h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "Home",
  "uid": "behb650o5dudcaaaa",
  "version": 19,
  "weekStart": ""
}